"use strict";(self.webpackChunknutgram_docs=self.webpackChunknutgram_docs||[]).push([[4071],{3986:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return s}});var o=t(83117),r=(t(67294),t(3905));t(56022);const a={},i="Handling Exceptions",c={unversionedId:"usage/exceptions",id:"usage/exceptions",title:"Handling Exceptions",description:"Exceptions are a common part of programming.",source:"@site/docs/usage/exceptions.md",sourceDirName:"usage",slug:"/usage/exceptions",permalink:"/docs/usage/exceptions",draft:!1,editUrl:"https://github.com/nutgram/docs/tree/master/docs/usage/exceptions.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Web Validation",permalink:"/docs/usage/web_validation"},next:{title:"\u2697\ufe0f Testing",permalink:"/docs/category/\ufe0f-testing"}},l={},s=[{value:"Software Exceptions",id:"software-exceptions",level:2},{value:"<code>onException</code> handler (generic)",id:"onexception-handler-generic",level:3},{value:"<code>onException</code> handler (explicit)",id:"onexception-handler-explicit",level:3},{value:"Telegram API Errors",id:"telegram-api-errors",level:2},{value:"<code>try/catch</code>",id:"trycatch",level:3},{value:"<code>try/catch</code> + <code>registerApiException</code>",id:"trycatch--registerapiexception",level:3},{value:"<code>onApiError</code> handler",id:"onapierror-handler",level:3},{value:"<code>TelegramException</code> methods",id:"telegramexception-methods",level:3}],p={toc:s};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"handling-exceptions"},"Handling Exceptions"),(0,r.kt)("p",null,"Exceptions are a common part of programming.\nNormally, when an exception is raised, the program will crash."),(0,r.kt)("p",null,"In Nutgram, exceptions can be categorized into two main types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Exceptions"),": These are exceptions that originate from your code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Telegram API Errors"),": These are errors that come from the Telegram Bot API.")),(0,r.kt)("h2",{id:"software-exceptions"},"Software Exceptions"),(0,r.kt)("p",null,"Software exceptions are errors that occur within your own code. "),(0,r.kt)("p",null,"To handle these exceptions, you can use a try/catch block or Nutgram's onException handler."),(0,r.kt)("h3",{id:"onexception-handler-generic"},(0,r.kt)("inlineCode",{parentName:"h3"},"onException")," handler (generic)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onException")," handler can be used to catch any exceptions that are not handled elsewhere in your code.\nIf defined, this handler will be triggered when an exception occurs within any other handler,\npassing the $exception as the second argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse Throwable;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n// define some handlers ...\n\n// and exception is thrown...\n$bot->onMessage(function (Nutgram $bot) {\n    // do stuff\n    throw new Exception('Oh no!');\n});\n\n// ... and passed to the exception handler\n$bot->onException(function (Nutgram $bot, Throwable $exception) {\n    echo $exception->getMessage(); // Oh no!\n    $bot->sendMessage('Whoops!');\n});\n\n$bot->run();\n")),(0,r.kt)("h3",{id:"onexception-handler-explicit"},(0,r.kt)("inlineCode",{parentName:"h3"},"onException")," handler (explicit)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onException")," handler also allows you to specify different callbacks based on the type of exception being thrown:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse Exception;\nuse InvalidArgumentException;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n// and exception is thrown...\n$bot->onMessage(function (Nutgram $bot) {\n    if (random_int(0, 1)) {    \n        throw new InvalidArgumentException();\n    }\n    throw new Exception('Oh no!');\n});\n\n$bot->onException(InvalidArgumentException::class, function (Nutgram $bot, InvalidArgumentException $exception) {\n    // your code here\n});\n\n$bot->onException(Exception::class, function (Nutgram $bot, Exception $exception) {\n    // your code here\n});\n\n$bot->run();\n")),(0,r.kt)("h2",{id:"telegram-api-errors"},"Telegram API Errors"),(0,r.kt)("p",null,"A Telegram API error occur when the Telegram Bot API returns an error. "),(0,r.kt)("p",null,"These errors can be handled using ",(0,r.kt)("inlineCode",{parentName:"p"},"try/catch")," blocks or the ",(0,r.kt)("inlineCode",{parentName:"p"},"onApiError")," handler."),(0,r.kt)("h3",{id:"trycatch"},(0,r.kt)("inlineCode",{parentName:"h3"},"try/catch")),(0,r.kt)("p",null,"You can also use a ",(0,r.kt)("inlineCode",{parentName:"p"},"try/catch")," block to catch Telegram API errors."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:"showLineNumbers",showLineNumbers:!0},"$bot = new Nutgram('token');\n\n$bot->onCommand('start', function (Nutgram $bot) {\n    try {\n        $post = $bot->sendMessage('Hello', chat_id: 123456);\n        echo gettype($post).PHP_EOL;\n    } catch (Throwable $e){\n        echo '[try] '.$e::class. ' => ' . $e->getMessage().PHP_EOL;\n    }\n});\n\n$bot->run();\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Output:")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"line 8: ","[try]"," SergiX44\\Nutgram\\Telegram\\Exceptions\\TelegramException => Forbidden: bot was blocked by the user")),(0,r.kt)("h3",{id:"trycatch--registerapiexception"},(0,r.kt)("inlineCode",{parentName:"h3"},"try/catch")," + ",(0,r.kt)("inlineCode",{parentName:"h3"},"registerApiException")),(0,r.kt)("p",null,"You can register a custom exception class to be thrown when a specific pattern is detected in the error message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"class BotBlocked extends ApiException\n{\n    public static ?string $pattern = '.*bot was blocked.*';\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:"showLineNumbers",showLineNumbers:!0},"$bot = new Nutgram('token');\n\n$bot->onCommand('start', function (Nutgram $bot) {\n    try {\n        $post = $bot->sendMessage('Hello', chat_id: 123456);\n        echo gettype($post).PHP_EOL;\n    } catch (Throwable $e){\n        echo '[try] '.$e::class. ' => ' . $e->getMessage().PHP_EOL;\n    }\n});\n\n$bot->registerApiException(BotBlocked::class);\n\n$bot->run();\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Output:")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"line 8: ","[try]"," App\\BotBlocked => Forbidden: bot was blocked by the user")),(0,r.kt)("p",null,"As default, the ApiException class will throw when invoked, but you can also override this behaviour:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"class UserDeactivatedException extends ApiException\n{\n    public static ?string $pattern = '.*deactivated.*';\n\n    public function __invoke(Nutgram $bot, TelegramException $e)\n    {\n        // override this method to change the default behaviour:\n        throw new static($e->getMessage(), $e->getCode(), $e);\n    }\n}\n")),(0,r.kt)("h3",{id:"onapierror-handler"},(0,r.kt)("inlineCode",{parentName:"h3"},"onApiError")," handler"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onApiError")," handler allows you to handle Telegram API errors globally."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:"showLineNumbers",showLineNumbers:!0},"$bot = new Nutgram('token');\n\n$bot->onCommand('start', function (Nutgram $bot) {\n    $post = $bot->sendMessage('Hello', chat_id: 123456);\n    echo gettype($post).PHP_EOL;\n});\n\n$bot->onApiError(function (Nutgram $bot, TelegramException $e) {\n    echo '[onApiError] '.$e::class. ' => ' . $e->getMessage().PHP_EOL;\n});\n\n$bot->run();\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Output:")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"line 9: ","[onApiError]"," SergiX44\\Nutgram\\Telegram\\Exceptions\\TelegramException => Forbidden: bot was blocked by the user",(0,r.kt)("br",null),"\nline 5: NULL")),(0,r.kt)("p",null,"Like the onException, the handler support a regex matching the text returned by the telegram api:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Exceptions\\TelegramException;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onMessage(function (Nutgram $bot) {\n    $bot->sendMessage(\n        text: 'Invalid call!',\n        chat_id: null,\n    );\n});\n\n$bot->onApiError('chat not found', function (Nutgram $bot, TelegramException $exception) {\n    //\n});\n\n\n$bot->onApiError('user(.*)deactivated', function (Nutgram $bot, TelegramException $exception) {\n    //\n});\n\n$bot->run();\n")),(0,r.kt)("h3",{id:"telegramexception-methods"},(0,r.kt)("inlineCode",{parentName:"h3"},"TelegramException")," methods"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TelegramException")," class has some useful methods to get more information about the error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Exceptions\\TelegramException;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onMessage(function (Nutgram $bot) {\n    foreach(range(1,200) as $i){\n        $bot->sendMessage('Too many calls!');\n    }\n});\n\n$bot->onApiError(function (Nutgram $bot, TelegramException $exception) {\n    echo $exception->getMessage(); // Too Many Requests: retry after 14\n    echo $exception->getCode(); // 429\n    echo $exception->getParameters(); // ['retry_after' => 14]\n    echo $exception->getParameter('retry_after'); // 14\n    echo $exception->hasParameter('retry_after'); // true\n});\n\n$bot->run();\n")))}u.isMDXComponent=!0}}]);