"use strict";(self.webpackChunknutgram_docs=self.webpackChunknutgram_docs||[]).push([[5691],{85162:function(e,t,a){a.d(t,{Z:function(){return r}});var n=a(67294),l=a(86010),i="tabItem_Ymn6";function r(e){let{children:t,hidden:a,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(i,r),hidden:a},t)}},65488:function(e,t,a){a.d(t,{Z:function(){return p}});var n=a(83117),l=a(67294),i=a(86010),r=a(72389),o=a(67392),s=a(7094),d=a(12466),u="tabList__CuJ",c="tabItem_LNqP";function m(e){var t;const{lazy:a,block:r,defaultValue:m,values:p,groupId:v,className:k}=e,h=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),w=p??h.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),g=(0,o.l)(w,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===m?m:m??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??h[0].props.value;if(null!==b&&!w.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${w.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:N}=(0,s.U)(),[T,C]=(0,l.useState)(b),y=[],{blockElementScrollPositionUntilNextRender:E}=(0,d.o5)();if(null!=v){const e=f[v];null!=e&&e!==T&&w.some((t=>t.value===e))&&C(e)}const x=e=>{const t=e.currentTarget,a=y.indexOf(t),n=w[a].value;n!==T&&(E(t),C(n),null!=v&&N(v,String(n)))},M=e=>{var t;let a=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const t=y.indexOf(e.currentTarget)+1;a=y[t]??y[0];break}case"ArrowLeft":{const t=y.indexOf(e.currentTarget)-1;a=y[t]??y[y.length-1];break}}null==(t=a)||t.focus()};return l.createElement("div",{className:(0,i.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},k)},w.map((e=>{let{value:t,label:a,attributes:r}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>y.push(e),onKeyDown:M,onClick:x},r,{className:(0,i.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":T===t})}),a??t)}))),a?(0,l.cloneElement)(h.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function p(e){const t=(0,r.Z)();return l.createElement(m,(0,n.Z)({key:String(t)},e))}},6063:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return c}});var n=a(83117),l=(a(67294),a(3905)),i=(a(56022),a(65488)),r=a(85162);const o={},s="Mock incoming responses",d={unversionedId:"testing/mocking",id:"testing/mocking",title:"Mock incoming responses",description:"Overview",source:"@site/docs/testing/mocking.mdx",sourceDirName:"testing",slug:"/testing/mocking",permalink:"/docs/testing/mocking",draft:!1,editUrl:"https://github.com/nutgram/docs/tree/master/docs/testing/mocking.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Hearing updates",permalink:"/docs/testing/hearing"},next:{title:"Available Assertions",permalink:"/docs/testing/asserting"}},u={},c=[{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:3},{value:"Available Methods",id:"available-methods",level:2},{value:"willReceive",id:"willreceive",level:3},{value:"willReceivePartial",id:"willreceivepartial",level:3},{value:"willStartConversation",id:"willstartconversation",level:3},{value:"withoutMiddleware",id:"withoutmiddleware",level:3},{value:"overridemiddleware",id:"overridemiddleware",level:3}],m={toc:c};function p(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"mock-incoming-responses"},"Mock incoming responses"),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"After you have configured your hearing method, to test a custom response from Telegram\nyou have to mock the received data.\nTo do that, the framework gives you some methods to automatically generate incoming responses."),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("p",null,"We assume that the ",(0,l.kt)("inlineCode",{parentName:"p"},"$this->bot")," is loaded as mentioned on the ",(0,l.kt)("a",{parentName:"p",href:"/docs/testing/introduction"},"Introduction")," page."),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"test",label:"Test",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$this->bot\n     ->hearText('dice')\n     ->willReceivePartial(['dice' => ['emoji' => '\ud83c\udfb2', 'value' => 4]])\n     ->reply()\n     ->assertReplyMessage(['dice' => ['emoji' => '\ud83c\udfb2', 'value' => 4]]);\n"))),(0,l.kt)(r.Z,{value:"handler",label:"Handler",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onText('dice', function (Nutgram $bot) {\n    $bot->sendDice(['emoji' => Emojis::DICE]);\n});\n")))),(0,l.kt)("h2",{id:"available-methods"},"Available Methods"),(0,l.kt)("div",{class:"container"},(0,l.kt)("div",{class:"row"},(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("div",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#willreceive"},"willReceive()"))),(0,l.kt)("div",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#willreceivepartial"},"willReceivePartial()"))),(0,l.kt)("div",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#willstartconversation"},"willStartConversation()")))),(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("div",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#withoutmiddleware"},"withoutMiddleware()"))),(0,l.kt)("div",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#overridemiddleware"},"overrideMiddleware()")))))),(0,l.kt)("h3",{id:"willreceive"},"willReceive"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"willReceive")," will mock an entire response.\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"ok")," parameter is optional."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"->willReceive([\n    'message_id' => 1234,\n    'date' => 1647284950,\n    'from' => [\n        'id' => 123456789,\n        'is_bot' => true,\n        'username' => 'nutgrambot',\n        'first_name' => 'nutgrambot',\n    ],\n    'chat' => [\n        'id' => 12345,\n        'type' => 'private',\n        'username' => 'nutgram',\n        'first_name' => 'foo',\n        'last_name' => 'bar',\n    ],\n    'dice' => [\n        'emoji' => '\ud83c\udfb2', \n        'value' => 4\n    ]\n], ok: true);\n")),(0,l.kt)("h3",{id:"willreceivepartial"},"willReceivePartial"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"willReceivePartial")," will mock a partial response.\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"ok")," parameter is optional."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"->willReceivePartial([\n    'dice' => [\n        'emoji' => '\ud83c\udfb2', \n        'value' => 4\n    ]\n], ok: true);\n")),(0,l.kt)("h3",{id:"willstartconversation"},"willStartConversation"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"willStartConversation")," will cache ",(0,l.kt)("inlineCode",{parentName:"p"},"userId")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"chatId"),".",(0,l.kt)("br",null),"\nUseful when used with ",(0,l.kt)("a",{parentName:"p",href:"asserting#assertactiveconversation"},(0,l.kt)("inlineCode",{parentName:"a"},"assertActiveConversation")),"\nand ",(0,l.kt)("a",{parentName:"p",href:"asserting#assertnoconversation"},(0,l.kt)("inlineCode",{parentName:"a"},"assertNoConversation")),".",(0,l.kt)("br",null),"\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"remember")," parameter is optional."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"->willStartConversation(remember: true);\n")),(0,l.kt)("h3",{id:"withoutmiddleware"},"withoutMiddleware"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"withoutMiddleware")," will remove the listed middlewares from the global middleware list."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"->withoutMiddleware([FooMiddleware::class]);\n")),(0,l.kt)("h3",{id:"overridemiddleware"},"overridemiddleware"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"overridemiddleware")," will override the global middleware list with the listed middlewares."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"->overridemiddleware([BarMiddleware::class]);\n")))}p.isMDXComponent=!0}}]);