"use strict";(self.webpackChunknutgram_docs=self.webpackChunknutgram_docs||[]).push([[1414],{83907:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return c},frontMatter:function(){return s},metadata:function(){return r},toc:function(){return d}});var a=n(83117),o=(n(67294),n(3905));n(56022);const s={},i="Introduction",r={unversionedId:"testing/introduction",id:"testing/introduction",title:"Introduction",description:"The framework supports some automatic mocking features that allows you to easily create unit tests for your application.",source:"@site/docs/testing/introduction.md",sourceDirName:"testing",slug:"/testing/introduction",permalink:"/docs/testing/introduction",draft:!1,editUrl:"https://github.com/nutgram/docs/tree/master/docs/testing/introduction.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"\u2697\ufe0f Testing",permalink:"/docs/category/\ufe0f-testing"},next:{title:"Hearing updates",permalink:"/docs/testing/hearing"}},l={},d=[{value:"Getting a <code>Fake</code> instance",id:"getting-a-fake-instance",level:2},{value:"Base Methods",id:"base-methods",level:2},{value:"<code>reply()</code>",id:"reply",level:3},{value:"<code>dump()</code>, <code>dd()</code>",id:"dump-dd",level:3},{value:"<code>clearCache()</code>",id:"clearcache",level:3},{value:"<code>getRequestHistory()</code>",id:"getrequesthistory",level:3},{value:"<code>setCommonUser(User $user)</code>",id:"setcommonuseruser-user",level:3},{value:"<code>setCommonChat(Chat $chat)</code>",id:"setcommonchatchat-chat",level:3}],u={toc:d};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The framework supports some automatic mocking features that allows you to easily create unit tests for your application.\nGiven the framework-agnostic nature, you are free to use the test library you want (PHPUnit, PEST, etc), in the examples shown PHPUnit will be used."),(0,o.kt)("p",null,"The framework can be instantiated as a ",(0,o.kt)("inlineCode",{parentName:"p"},"Fake")," instance, all the requests to the Telegram API are stored inside a history, and a mocked response is generated accordingly.\nIn this way, you can test your business logic, without having to interact at all with the Telegram API."),(0,o.kt)("h2",{id:"getting-a-fake-instance"},"Getting a ",(0,o.kt)("inlineCode",{parentName:"h2"},"Fake")," instance"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you are using Laravel, checkout the section in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/laravel#testing"},"Laravel Integration page")," to see\nhow to get automatically the fake instance!")),(0,o.kt)("p",null,"How to get a ",(0,o.kt)("inlineCode",{parentName:"p"},"fake")," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use PHPUnit\\Framework\\TestCase;\nuse SergiX44\\Nutgram\\Nutgram;\n\nclass BotTest extends TestCase\n{\n    public function test_retrieve_mocked_instance(): void\n    {\n        $bot = Nutgram::fake();\n        \n        // ...\n    }\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"$bot")," instance tho, is a clean one with no handlers/middleware registered, so you should have somewhere a method\nthat register them, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use PHPUnit\\Framework\\TestCase;\nuse SergiX44\\Nutgram\\Testing\\FakeNutgram;\nuse SergiX44\\Nutgram\\Nutgram;\n\nclass BotTest extends TestCase\n{\n    private FakeNutgram $bot;\n    \n    public function setUp(): void \n    {\n        $this->bot = Nutgram::fake();\n        \n        // your custom method to register handlers\n        $this->bootInstance($this->bot);\n        \n        /*\n         * Example:\n         * \n         * $this->bot->onCommand('hello', function (Nutgram $bot) {\n         *     $bot->sendMessage('Hello!');\n         * });\n         */\n    }\n\n\n    public function test_retrieve_mocked_instance(): void\n    {\n        // define assertions\n        $this->bot\n            ->hearText('/hello')\n            ->reply()\n            ->assertReplyText('Hello!');\n    }\n}\n")),(0,o.kt)("h2",{id:"base-methods"},"Base Methods"),(0,o.kt)("h3",{id:"reply"},(0,o.kt)("inlineCode",{parentName:"h3"},"reply()")),(0,o.kt)("p",null,"Executes run a mocked update (and mocked responses) though the bot handlers.\nIt should be called after the ",(0,o.kt)("a",{parentName:"p",href:"/docs/testing/mocking"},'"will" methods')," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/testing/hearing"},'"hears" methods'),"."),(0,o.kt)("p",null,"It's like calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"->run()")," method, that also prepare the instance for further assertions and tests."),(0,o.kt)("h3",{id:"dump-dd"},(0,o.kt)("inlineCode",{parentName:"h3"},"dump()"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"dd()")),(0,o.kt)("p",null,"To be used wil debugging, it will dump the request generated by the bot. ",(0,o.kt)("inlineCode",{parentName:"p"},"dump")," will output to console, while the ",(0,o.kt)("inlineCode",{parentName:"p"},"dd"),"\nwill also halt the execution."),(0,o.kt)("h3",{id:"clearcache"},(0,o.kt)("inlineCode",{parentName:"h3"},"clearCache()")),(0,o.kt)("p",null,"It empties all the internal caches."),(0,o.kt)("h3",{id:"getrequesthistory"},(0,o.kt)("inlineCode",{parentName:"h3"},"getRequestHistory()")),(0,o.kt)("p",null,"Returns an associative array with the request generated  by the bot, and the mocked response."),(0,o.kt)("h3",{id:"setcommonuseruser-user"},(0,o.kt)("inlineCode",{parentName:"h3"},"setCommonUser(User $user)")),(0,o.kt)("p",null,"Sets a common user that will be used in all the mocked updates."),(0,o.kt)("h3",{id:"setcommonchatchat-chat"},(0,o.kt)("inlineCode",{parentName:"h3"},"setCommonChat(Chat $chat)")),(0,o.kt)("p",null,"Sets a common chat that will be used in all the mocked updates."))}c.isMDXComponent=!0}}]);