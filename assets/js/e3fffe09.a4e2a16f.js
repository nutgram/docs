"use strict";(self.webpackChunknutgram_docs=self.webpackChunknutgram_docs||[]).push([[3780],{85162:function(e,a,t){t.d(a,{Z:function(){return r}});var n=t(67294),s=t(86010),l="tabItem_Ymn6";function r(e){let{children:a,hidden:t,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(l,r),hidden:t},a)}},65488:function(e,a,t){t.d(a,{Z:function(){return m}});var n=t(83117),s=t(67294),l=t(86010),r=t(72389),o=t(67392),d=t(7094),u=t(12466),i="tabList__CuJ",c="tabItem_LNqP";function p(e){var a;const{lazy:t,block:r,defaultValue:p,values:m,groupId:b,className:k}=e,g=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=m??g.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),f=(0,o.l)(v,((e,a)=>e.value===a.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===p?p:p??(null==(a=g.find((e=>e.props.default)))?void 0:a.props.value)??g[0].props.value;if(null!==h&&!v.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:T}=(0,d.U)(),[x,$]=(0,s.useState)(h),N=[],{blockElementScrollPositionUntilNextRender:C}=(0,u.o5)();if(null!=b){const e=y[b];null!=e&&e!==x&&v.some((a=>a.value===e))&&$(e)}const w=e=>{const a=e.currentTarget,t=N.indexOf(a),n=v[t].value;n!==x&&(C(a),$(n),null!=b&&T(b,String(n)))},I=e=>{var a;let t=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const a=N.indexOf(e.currentTarget)+1;t=N[a]??N[0];break}case"ArrowLeft":{const a=N.indexOf(e.currentTarget)-1;t=N[a]??N[N.length-1];break}}null==(a=t)||a.focus()};return s.createElement("div",{className:(0,l.Z)("tabs-container",i)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},k)},v.map((e=>{let{value:a,label:t,attributes:r}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:x===a?0:-1,"aria-selected":x===a,key:a,ref:e=>N.push(e),onKeyDown:I,onClick:w},r,{className:(0,l.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":x===a})}),t??a)}))),t?(0,s.cloneElement)(g.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},g.map(((e,a)=>(0,s.cloneElement)(e,{key:a,hidden:e.props.value!==x})))))}function m(e){const a=(0,r.Z)();return s.createElement(p,(0,n.Z)({key:String(a)},e))}},40736:function(e,a,t){t.r(a),t.d(a,{assets:function(){return i},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return c}});var n=t(83117),s=(t(67294),t(3905)),l=(t(56022),t(65488)),r=t(85162);const o={},d="Examples",u={unversionedId:"testing/examples",id:"testing/examples",title:"Examples",description:"This page contains some examples of how to use the testing framework.",source:"@site/docs/testing/examples.mdx",sourceDirName:"testing",slug:"/testing/examples",permalink:"/docs/testing/examples",draft:!1,editUrl:"https://github.com/nutgram/docs/tree/master/docs/testing/examples.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Available Assertions",permalink:"/docs/testing/asserting"},next:{title:"\u23eb Upgrading",permalink:"/docs/category/-upgrading"}},i={},c=[{value:"Send a message",id:"send-a-message",level:2},{value:"Send multiple messages",id:"send-multiple-messages",level:2},{value:"Remove a keyboard",id:"remove-a-keyboard",level:2},{value:"OnlyDev Middleware",id:"onlydev-middleware",level:2},{value:"Feedback Conversation",id:"feedback-conversation",level:2}],p={toc:c};function m(e){let{components:a,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"examples"},"Examples"),(0,s.kt)("p",null,"This page contains some examples of how to use the testing framework."),(0,s.kt)("p",null,"We assume that the ",(0,s.kt)("inlineCode",{parentName:"p"},"$bot")," is loaded as mentioned on the ",(0,s.kt)("a",{parentName:"p",href:"/docs/testing/introduction"},"Introduction")," page."),(0,s.kt)("h2",{id:"send-a-message"},"Send a message"),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"test",label:"Test",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$bot->hearText('/start')\n    ->reply()\n    ->assertReplyText('Hello World!');\n"))),(0,s.kt)(r.Z,{value:"handler",label:"Handler",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onCommand('start', function (Nutgram $bot) {\n    $bot->sendMessage('Hello World!');\n});\n")))),(0,s.kt)("h2",{id:"send-multiple-messages"},"Send multiple messages"),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"test",label:"Test",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$bot->hearText('/start')\n    ->reply()\n    ->assertSequence(\n        fn (FakeNutgram $x) => $x->assertReplyText('foo'),\n        fn (FakeNutgram $x) => $x->assertReplyText('bar'),\n    );\n"))),(0,s.kt)(r.Z,{value:"handler",label:"Handler",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onCommand('start', function (Nutgram $bot) {\n    $bot->sendMessage('foo');\n    $bot->sendMessage('bar');\n});\n")))),(0,s.kt)("h2",{id:"remove-a-keyboard"},"Remove a keyboard"),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"test",label:"Test",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$bot->hearText('/remove_keyboard')\n    ->reply()\n    ->assertReplyMessage([\n        'text' => 'Removing keyboard...',\n        'reply_markup' => ReplyKeyboardRemove::make(true),\n    ])\n    ->assertCalled('deleteMessage');\n"))),(0,s.kt)(r.Z,{value:"handler",label:"Handler",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onCommand('remove_keyboard', function (Nutgram $bot) {\n    $message = $bot->sendMessage(\n        text: 'Removing keyboard...',\n        reply_markup: ReplyKeyboardRemove::make(true),\n    );\n    $message->delete();\n});\n")))),(0,s.kt)("h2",{id:"onlydev-middleware"},"OnlyDev Middleware"),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"test",label:"Test",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="unable to get stats"',title:'"unable',to:!0,get:!0,'stats"':!0},"$bot->onText('stats', function (Nutgram $bot) {\n    $bot->sendMessage('Sensitive data');\n})->middleware(OnlyDev::class);\n\n$bot->hearText('/stats')\n    ->reply()\n    ->assertNoReply();\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="able to get stats"',title:'"able',to:!0,get:!0,'stats"':!0},"$bot->onText('stats', function (Nutgram $bot) {\n    $bot->sendMessage('Sensitive data');\n})->middleware(OnlyDev::class);\n\n$bot->setCommonUser(User::make(123456789, false, 'John'))      // needed to not get a random user id\n    ->setCommonChat(Chat::make(123456789, ChatType::PRIVATE))  // needed to not get a random user id\n    ->hearText('/stats')\n    ->reply()\n    ->assertReplyText('Sensitive data');\n"))),(0,s.kt)(r.Z,{value:"handler",label:"Handler",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"class OnlyDev\n{\n    public function __invoke(Nutgram $bot, $next): void\n    {\n        if ($bot->user()?->id !== 123456789) {\n            return;\n        }\n\n        $next($bot);\n    }\n}\n")))),(0,s.kt)("h2",{id:"feedback-conversation"},"Feedback Conversation"),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"test",label:"Test",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="send feedback"',title:'"send','feedback"':!0},"// first step\n$bot->willStartConversation()\n    ->hearText('/feedback')\n    ->reply()\n    ->assertReplyMessage([\n        'text' => 'Send your feedback',\n        'reply_markup' => InlineKeyboardMarkup::make()->addRow(\n            InlineKeyboardButton::make('Cancel', callback_data: 'feedback.cancel'),\n        ),\n    ])\n    ->assertActiveConversation();\n\n// second step\n$bot->hearText('this is a feedback')\n    ->reply()\n    ->assertReplyText('Thanks for your feedback!')\n    ->assertNoConversation();\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="cancel feedback"',title:'"cancel','feedback"':!0},"// first step\n$bot->willStartConversation()\n    ->hearText('/feedback')\n    ->reply()\n    ->assertReplyMessage([\n        'text' => 'Send your feedback',\n        'reply_markup' => InlineKeyboardMarkup::make()->addRow(\n            InlineKeyboardButton::make('Cancel', callback_data: 'feedback.cancel'),\n        ),\n    ])\n    ->assertActiveConversation();\n\n// second step\n$bot->hearCallbackQueryData('feedback.cancel')\n    ->reply()\n    ->assertReplyText('Feedback cancelled')\n    ->assertCalled('answerCallbackQuery')\n    ->assertNoConversation();\n"))),(0,s.kt)(r.Z,{value:"handler",label:"Conversation",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"class FeedbackConversation extends Conversation\n{\n    public function start(Nutgram $bot): void\n    {\n        // ask for feedback\n        $bot->sendMessage(\n            text: 'Send your feedback',\n            reply_markup: InlineKeyboardMarkup::make()->addRow(\n                InlineKeyboardButton::make('Cancel', callback_data: 'feedback.cancel')\n            ),\n        );\n\n        // wait for the user to send feedback\n        $this->next('getFeedback');\n    }\n\n    public function getFeedback(Nutgram $bot): void\n    {\n        //handle cancel button\n        if ($bot->callbackQuery()?->data === 'feedback.cancel') {\n            $bot->sendMessage('Feedback cancelled');\n            $bot->answerCallbackQuery();\n\n            //close conversation\n            $this->end();\n            return;\n        }\n\n        //get the input\n        $feedback = $bot->message()?->text;\n\n        //check valid input\n        if ($feedback === null) {\n            $bot->sendMessage('Invalid input, please send your feedback again');\n            $this->start($bot);\n            return;\n        }\n\n        //save the feedback\n        // TODO: save $feedback to database\n\n        // thanks the user\n        $bot->sendMessage('Thanks for your feedback!');\n\n        //close conversation\n        $this->end();\n    }\n}\n")))))}m.isMDXComponent=!0}}]);