"use strict";(self.webpackChunknutgram_docs=self.webpackChunknutgram_docs||[]).push([[8451],{85162:function(e,t,a){a.d(t,{Z:function(){return i}});var n=a(67294),l=a(86010),r="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:a},t)}},65488:function(e,t,a){a.d(t,{Z:function(){return u}});var n=a(83117),l=a(67294),r=a(86010),i=a(72389),o=a(67392),s=a(7094),d=a(12466),m="tabList__CuJ",c="tabItem_LNqP";function p(e){var t;const{lazy:a,block:i,defaultValue:p,values:u,groupId:g,className:h}=e,b=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=u??b.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),N=(0,o.l)(k,((e,t)=>e.value===t.value));if(N.length>0)throw new Error(`Docusaurus error: Duplicate values "${N.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==y&&!k.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:C,setTabGroupChoices:$}=(0,s.U)(),[v,f]=(0,l.useState)(y),E=[],{blockElementScrollPositionUntilNextRender:T}=(0,d.o5)();if(null!=g){const e=C[g];null!=e&&e!==v&&k.some((t=>t.value===e))&&f(e)}const w=e=>{const t=e.currentTarget,a=E.indexOf(t),n=k[a].value;n!==v&&(T(t),f(n),null!=g&&$(g,String(n)))},A=e=>{var t;let a=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const t=E.indexOf(e.currentTarget)+1;a=E[t]??E[0];break}case"ArrowLeft":{const t=E.indexOf(e.currentTarget)-1;a=E[t]??E[E.length-1];break}}null==(t=a)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",m)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},h)},k.map((e=>{let{value:t,label:a,attributes:i}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>E.push(e),onKeyDown:A,onClick:w},i,{className:(0,r.Z)("tabs__item",c,null==i?void 0:i.className,{"tabs__item--active":v===t})}),a??t)}))),a?(0,l.cloneElement)(b.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function u(e){const t=(0,i.Z)();return l.createElement(p,(0,n.Z)({key:String(t)},e))}},25301:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return c}});var n=a(83117),l=(a(67294),a(3905)),r=(a(56022),a(65488)),i=a(85162);const o={},s="Handlers",d={unversionedId:"usage/handlers",id:"usage/handlers",title:"Handlers",description:"Concept",source:"@site/docs/usage/handlers.mdx",sourceDirName:"usage",slug:"/usage/handlers",permalink:"/docs/usage/handlers",draft:!1,editUrl:"https://github.com/nutgram/docs/tree/master/docs/usage/handlers.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Sending Requests",permalink:"/docs/usage/sending_requests"},next:{title:"Middleware",permalink:"/docs/usage/middleware"}},m={},c=[{value:"Concept",id:"concept",level:2},{value:"Available Handlers",id:"available-handlers",level:2},{value:"Update Handlers",id:"update-handlers",level:3},{value:"Message Handlers",id:"message-handlers",level:3},{value:"Special Handlers",id:"special-handlers",level:3},{value:"Specific &amp; Special Handlers",id:"specific--special-handlers",level:2},{value:"<code>onCommand</code>",id:"oncommand",level:3},{value:"<code>registerCommand</code>",id:"registercommand",level:3},{value:"<code>onText</code>",id:"ontext",level:3},{value:"<code>onMessageType</code>",id:"onmessagetype",level:3},{value:"<code>onCallbackQueryData</code>",id:"oncallbackquerydata",level:3},{value:"<code>fallback</code>",id:"fallback",level:3},{value:"<code>fallbackOn</code>",id:"fallbackon",level:3},{value:"<code>onException</code>",id:"onexception",level:3},{value:"<code>onApiError</code>",id:"onapierror",level:3},{value:"Register API exceptions",id:"register-api-exceptions",level:4},{value:"<code>beforeApiRequest</code>",id:"beforeapirequest",level:3},{value:"<code>afterApiRequest</code>",id:"afterapirequest",level:3},{value:"Named parameters constraints",id:"named-parameters-constraints",level:2},{value:"Custom parameters binding",id:"custom-parameters-binding",level:2},{value:"Handlers Priority",id:"handlers-priority",level:2},{value:"Disable handler registration",id:"disable-handler-registration",level:2},{value:"Automatically register bot commands",id:"automatically-register-bot-commands",level:2},{value:"Language code support",id:"language-code-support",level:3},{value:"No language code",id:"no-language-code",level:4},{value:"Specific language code",id:"specific-language-code",level:4},{value:"Scope support",id:"scope-support",level:3},{value:"How to set a scope",id:"how-to-set-a-scope",level:4},{value:"Available scopes",id:"available-scopes",level:4},{value:"Registering commands",id:"registering-commands",level:3},{value:"OOP",id:"oop",level:2},{value:"Update Helpers",id:"update-helpers",level:2},{value:"Available helpers",id:"available-helpers",level:3},{value:"Persisting data",id:"persisting-data",level:2},{value:"Available methods",id:"available-methods",level:3}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"handlers"},"Handlers"),(0,l.kt)("h2",{id:"concept"},"Concept"),(0,l.kt)("p",null,"The framework provides to you a nice API event-like to handling incoming updates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onMessage(function (Nutgram $bot) {\n    $bot->sendMessage('You sent a message!');\n});\n\n$bot->run();\n")),(0,l.kt)("p",null,"Every ",(0,l.kt)("inlineCode",{parentName:"p"},"->on*")," handler is called based on the update type defined\nin ",(0,l.kt)("a",{parentName:"p",href:"https://core.telegram.org/bots/api#update"},"Telegram's update object"),", there are also some specific handlers, which\nmay respond based on specific patterns or types of messages."),(0,l.kt)("p",null,"As you can also see from the example above, some required parameters (like the ",(0,l.kt)("inlineCode",{parentName:"p"},"chat_id"),") can be ",(0,l.kt)("strong",{parentName:"p"},"omitted"),", while the\nbot is in the context of managing an update, so those fields ",(0,l.kt)("strong",{parentName:"p"},"are automatically extracted from the current update"),"."),(0,l.kt)("p",null,"Of course, ",(0,l.kt)("strong",{parentName:"p"},"you can override them at any time"),", simply by specifying them in the method call."),(0,l.kt)("h2",{id:"available-handlers"},"Available Handlers"),(0,l.kt)("p",null,"Here a full list of all the handler that listens to specific type of updates:"),(0,l.kt)("h3",{id:"update-handlers"},"Update Handlers"),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onUpdate($callable)"),(0,l.kt)("br",null),"Handles any incoming update."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onMessage($callable)"),(0,l.kt)("br",null),"Handles any incoming message."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIFIC-blue"}),"\xa0",(0,l.kt)("code",null,"onMessageType(string $type, $callable)"),(0,l.kt)("br",null),"Handles messages defined by type."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onEditedMessage($callable)"),(0,l.kt)("br",null),"Handles any incoming edited message."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onChannelPost($callable)"),(0,l.kt)("br",null),"Handles any message posted in a channel where the bot is administrator."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onEditedChannelPost($callable)"),(0,l.kt)("br",null),"Handles any message edited in a channel where the bot is administrator."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onInlineQuery($callable)"),(0,l.kt)("br",null),"Handles any incoming inline query."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIFIC-blue"}),"\xa0",(0,l.kt)("code",null,"onInlineQueryText(string $pattern, $callable)"),(0,l.kt)("br",null),"Handles any incoming inline query with a specific pattern, similar to `onText`."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onChosenInlineResult($callable)"),(0,l.kt)("br",null),"Handles any incoming chosen inline result."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIFIC-blue"}),"\xa0",(0,l.kt)("code",null,"onChosenInlineResultQuery($callable)"),(0,l.kt)("br",null),"Handles any incoming chosen inline result with a specific pattern, similar to `onText`."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onCallbackQuery($callable)"),(0,l.kt)("br",null),"Handles any incoming callback query."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIFIC-blue"}),"\xa0",(0,l.kt)("code",null,"onCallbackQueryData(string $pattern, $callable)"),(0,l.kt)("br",null),"Handles callback query with a specific pattern, similar to `onText`."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onShippingQuery($callable)"),(0,l.kt)("br",null),"Handles any incoming shipping query."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onPreCheckoutQuery($callable)"),(0,l.kt)("br",null),"Handles any incoming pre checkout query."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIFIC-blue"}),"\xa0",(0,l.kt)("code",null,"onPreCheckoutQueryPayload(string $pattern, $callable)"),(0,l.kt)("br",null),"Handles any incoming pre checkout query with a specific payload pattern."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onUpdatePoll($callable)"),(0,l.kt)("br",null),"Handles any incoming poll."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onPollAnswer($callable)"),(0,l.kt)("br",null),"Handles any incoming poll answer."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onMyChatMember($callable)"),(0,l.kt)("br",null),"Handles any chat member when updated."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onChatMember($callable)"),(0,l.kt)("br",null),"Handles any chat member in other chats when updated."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onChatJoinRequest($callable)"),(0,l.kt)("br",null),"Handles any chat join request."),(0,l.kt)("h3",{id:"message-handlers"},"Message Handlers"),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIFIC-blue"}),"\xa0",(0,l.kt)("code",null,"onText(string $pattern, $callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles text messages that match the given pattern (regex or parameters)."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIFIC-blue"}),"\xa0",(0,l.kt)("code",null,"onCommand(string $command, $callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles text messages that begin with `/`.",(0,l.kt)("br",null),"Automatically parses commands like `cmd@botname`."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onAnimation($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles animation messages"),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onAudio($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles audio messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onDocument($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles document messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onPhoto($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles photo messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onSticker($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles sticker messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onVideo($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles video messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onVideoNote($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles video_note messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onVoice($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles voice messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onContact($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles contact messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onDice($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles dice messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onGame($callable)"),(0,l.kt)("br",null),"Handles game messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onMessagePoll($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles poll messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onVenue($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles venue messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onLocation($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles location messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onStory($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles story messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onNewChatMembers($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles new_chat_members messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onLeftChatMember($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles left_chat_member messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onNewChatTitle($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles new_chat_title messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onNewChatPhoto($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles new_chat_photo messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onDeleteChatPhoto($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles delete_chat_photo messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onGroupChatCreated($callable)"),(0,l.kt)("br",null),"Handles group_chat_created messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onSupergroupChatCreated($callable)"),(0,l.kt)("br",null),"Handles supergroup_chat_created messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onChannelChatCreated($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles channel_chat_created messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onMessageAutoDeleteTimerChanged($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles message_auto_delete_timer_changed messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onMigrateToChatId($callable)"),(0,l.kt)("br",null),"Handles migrate_to_chat_id messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onMigrateFromChatId($callable)"),(0,l.kt)("br",null),"Handles migrate_from_chat_id messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onPinnedMessage($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles pinned_message messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onInvoice($callable)"),(0,l.kt)("br",null),"Handles invoice messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onSuccessfulPayment($callable)"),(0,l.kt)("br",null),"Handles successful_payment messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIFIC-blue"}),"\xa0",(0,l.kt)("code",null,"onSuccessfulPaymentPayload(string $pattern, $callable)"),(0,l.kt)("br",null),"Handles successful_payment messages with a specific payload pattern."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onConnectedWebsite($callable)"),(0,l.kt)("br",null),"Handles connected_website messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onPassportData($callable)"),(0,l.kt)("br",null),"Handles any incoming passport data messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onProximityAlertTriggered($callable)"),(0,l.kt)("br",null),"Handles proximity_alert_triggered messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onForumTopicCreated($callable)"),(0,l.kt)("br",null),"Handles any forum topic created."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onForumTopicClosed($callable)"),(0,l.kt)("br",null),"Handles any forum topic closed."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onForumTopicReopened($callable)"),(0,l.kt)("br",null),"Handles any forum topic reopened."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onVideoChatScheduled($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles video_chat_scheduled messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onVideoChatStarted($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles video_chat_started messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onVideoChatEnded($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles video_chat_ended messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onVideoChatParticipantsInvited($callable, UpdateType $target = UpdateType::MESSAGE)"),(0,l.kt)("br",null),"Handles video_chat_participants_invited messages."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"}),"\xa0",(0,l.kt)("code",null,"onWebAppData($callable)"),(0,l.kt)("br",null),"Handles web_app_data messages."),(0,l.kt)("h3",{id:"special-handlers"},"Special Handlers"),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIAL-yellow"}),"\xa0",(0,l.kt)("code",null,"fallback($callable)"),(0,l.kt)("br",null),"This handler if defined will be called if no handler, specific or generic, has been found for the current update."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIAL-yellow"}),"\xa0",(0,l.kt)("code",null,"fallbackOn(string $type, $callable)"),(0,l.kt)("br",null),"This handler has the same behavior as the previous one, but allows you to put a filter on the type of updates it can handle."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIAL-yellow"}),"\xa0",(0,l.kt)("code",null,"onException($callable)"),(0,l.kt)("br",null),"This handler will be called whenever the handling of an update throws an exception, if undefined the exception will not be caught.",(0,l.kt)("br",null),"Check the next paragraph for more details."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIAL-yellow"}),"\xa0",(0,l.kt)("code",null,"onApiError($callable)"),(0,l.kt)("br",null),"This handler will be called every time a call to Telegram's api fails, if undefined the exception will not be caught.",(0,l.kt)("br",null),"Check the next paragraph for more details."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIAL-yellow"}),"\xa0",(0,l.kt)("code",null,"beforeApiRequest($callable)"),(0,l.kt)("br",null),"This handler will be called before every call to Telegram's api, if undefined the call will be made without any modification.",(0,l.kt)("br",null),"Check the next paragraph for more details."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIAL-yellow"}),"\xa0",(0,l.kt)("code",null,"afterApiRequest($callable)"),(0,l.kt)("br",null),"This handler will be called after every call to Telegram's api, if undefined the call will be made without any modification.",(0,l.kt)("br",null),"Check the next paragraph for more details."),(0,l.kt)("h2",{id:"specific--special-handlers"},"Specific & Special Handlers"),(0,l.kt)("h3",{id:"oncommand"},(0,l.kt)("inlineCode",{parentName:"h3"},"onCommand")),(0,l.kt)("p",null,"For the implicit style see the ",(0,l.kt)("a",{parentName:"p",href:"#registercommand"},(0,l.kt)("inlineCode",{parentName:"a"},"registerCommand"))," section."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n// Called when a message contains the command \"/start someParameter\"\n$bot->onCommand('start {parameter}', function (Nutgram $bot, $parameter) {\n    $bot->sendMessage(\"The parameter is {$parameter}\");\n});\n\n// Called on command \"/help\"\n$bot->onCommand('help', function (Nutgram $bot) {\n    $bot->sendMessage('Help me!');\n});\n\n$bot->run();\n")),(0,l.kt)("h3",{id:"registercommand"},(0,l.kt)("inlineCode",{parentName:"h3"},"registerCommand")),(0,l.kt)("p",null,"A different and clean way to register commands implicitly."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// 1. create a command class like \"StartCommand.php\":\n\nnamespace App\\Telegram\\Commands;\n\nuse SergiX44\\Nutgram\\Handlers\\Type\\Command;\nuse SergiX44\\Nutgram\\Nutgram;\n\nclass StartCommand extends Command\n{\n    protected string $command = 'start';\n\n    protected ?string $description = 'A lovely start command';\n\n    public function handle(Nutgram $bot): void\n    {\n        $bot->sendMessage('Hello there!');\n    }\n}\n\n// 2. Register StartCommand inside Nutgram\n\n$bot->registerCommand(StartCommand::class);\n\n")),(0,l.kt)("h3",{id:"ontext"},(0,l.kt)("inlineCode",{parentName:"h3"},"onText")),(0,l.kt)("p",null,"For text messages, is possible also put parameters to match a regex, or to match part of text:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},'use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV[\'TOKEN\']);\n\n// ex. called when a message contains "My name is Mario"\n$bot->onText(\'My name is {name}\', function (Nutgram $bot, $name) {\n    $bot->sendMessage("Hi {$name}");\n});\n\n// ex. called when a message contains "I want 6 pizzas"\n$bot->onText(\'I want ([0-9]+) pizzas\', function (Nutgram $bot, $n) {\n    $bot->sendMessage("You will get {$n} pizzas!");\n});\n\n$bot->onText(\'I want ([0-9]+) portions of (pizza|cake)\', function (Nutgram $bot, $amount, $dish) {\n    $bot->sendMessage("You will get {$amount} portions of {$dish}!");\n});\n\n$bot->run();\n')),(0,l.kt)("h3",{id:"onmessagetype"},(0,l.kt)("inlineCode",{parentName:"h3"},"onMessageType")),(0,l.kt)("p",null,"It's like the ",(0,l.kt)("inlineCode",{parentName:"p"},"onMessage")," handler, but you can specify to which type of message you should handle:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Properties\\MessageType;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n// Called only when you send a photo\n$bot->onMessageType(MessageType::PHOTO, function (Nutgram $bot) {\n    $photos = $bot->message()->photo;\n    $bot->sendMessage('Nice pic!');\n});\n\n// Called only when you send an audio file\n$bot->onMessageType(MessageType::AUDIO, function (Nutgram $bot) {\n    $audio = $bot->message()->audio;\n    $bot->sendMessage('I love this song!');\n});\n\n$bot->run();\n")),(0,l.kt)("p",null,"You can see all the constants, in\nthe ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/nutgram/nutgram/blob/master/src/Telegram/Properties/MessageType.php"},"MessageType::class"),"."),(0,l.kt)("h3",{id:"oncallbackquerydata"},(0,l.kt)("inlineCode",{parentName:"h3"},"onCallbackQueryData")),(0,l.kt)("p",null,"It's like the ",(0,l.kt)("inlineCode",{parentName:"p"},"onText")," handler, but you can specify to which ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," contained in CallbackQuery to handle:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onCommand('start', function (Nutgram $bot) {\n    $bot->sendMessage(\n        text: 'Choose an option:',\n        reply_markup: InlineKeyboardMarkup::make()->addRow(\n            InlineKeyboardButton::make('One', callback_data: 'one'),\n            InlineKeyboardButton::make('Two', callback_data: 'two'),\n            InlineKeyboardButton::make('Cancel', callback_data: 'cancel'),\n        )\n    );\n});\n\n$bot->onCallbackQueryData('one|two', function (Nutgram $bot) {\n    $bot->sendMessage('Nice!');\n    $bot->answerCallbackQuery();\n});\n\n$bot->onCallbackQueryData('cancel', function (Nutgram $bot) {\n    $bot->sendMessage('Canceled!');\n    $bot->answerCallbackQuery();\n});\n\n$bot->run();\n")),(0,l.kt)("p",null,"The same thing also applies for custom parameters:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onCommand('start', function (Nutgram $bot) {\n    $bot->sendMessage(\n        text: 'Choose an option:',\n        reply_markup: InlineKeyboardMarkup::make()->addRow(\n            InlineKeyboardButton::make('One', callback_data: 'number 1'),\n            InlineKeyboardButton::make('Two', callback_data: 'number 2'),\n            InlineKeyboardButton::make('Cancel', callback_data: 'cancel'),\n        )\n    );\n});\n\n$bot->onCallbackQueryData('number {param}', function (Nutgram $bot, $param) {\n    $bot->sendMessage($param); // 1 or 2\n    $bot->answerCallbackQuery();\n});\n\n$bot->onCallbackQueryData('cancel', function (Nutgram $bot) {\n    $bot->sendMessage('Canceled!');\n    $bot->answerCallbackQuery();\n});\n\n$bot->run();\n")),(0,l.kt)("h3",{id:"fallback"},(0,l.kt)("inlineCode",{parentName:"h3"},"fallback")),(0,l.kt)("p",null,"This handler, if defined, will be called every time an ",(0,l.kt)("inlineCode",{parentName:"p"},"Update")," will not match any other defined handler:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n// But the user send something else than /start\n$bot->onCommand('start', function (Nutgram $bot) {\n    $bot->sendMessage('Started!');\n});\n\n$bot->fallback(function (Nutgram $bot) {\n    $bot->sendMessage('Sorry, I don\\'t understand.');\n});\n\n$bot->run();\n")),(0,l.kt)("h3",{id:"fallbackon"},(0,l.kt)("inlineCode",{parentName:"h3"},"fallbackOn")),(0,l.kt)("p",null,"This has the same behaviour of the ",(0,l.kt)("inlineCode",{parentName:"p"},"fallback"),", but allow you to define handlers based on the ",(0,l.kt)("inlineCode",{parentName:"p"},"Update")," type:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Properties\\UpdateType;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n// define some handlers ...\n\n// Called only for unmatched callback queries\n$bot->fallbackOn(UpdateType::CALLBACK_QUERY, function (Nutgram $bot) {\n    $bot->answerCallbackQuery();\n    $bot->editMessageReplyMarkup([/* ... */]);\n});\n\n// Called only for unmatched messages\n$bot->fallbackOn(UpdateType::MESSAGE, function (Nutgram $bot) {\n    $bot->sendMessage('Sorry, I don\\'t understand.');\n});\n\n$bot->run();\n")),(0,l.kt)("p",null,"You can see all the constants, in\nthe ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/nutgram/nutgram/blob/master/src/Telegram/Properties/UpdateType.php"},"UpdateType::class"),"."),(0,l.kt)("h3",{id:"onexception"},(0,l.kt)("inlineCode",{parentName:"h3"},"onException")),(0,l.kt)("p",null,"This handler, if defined, will be called if something on your other handlers goes wrong, passing the ",(0,l.kt)("inlineCode",{parentName:"p"},"$exception")," as\nsecond argument:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n// define some handlers ...\n\n// and exception is thrown...\n$bot->onMessage(function (Nutgram $bot) {\n    // do stuff\n    throw new Exception('Oh no!');\n});\n\n// ... and passed to the exception handler\n$bot->onException(function (Nutgram $bot, \\Throwable $exception) {\n    echo $exception->getMessage(); // Oh no!\n    error_log($exception);\n    $bot->sendMessage('Whoops!');\n});\n\n$bot->run();\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"onException")," handler supports also different callbacks based on the exception instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n// and exception is thrown...\n$bot->onMessage(function (Nutgram $bot) {\n    if (random_int(0, 1)) {    \n        throw new InvalidArgumentException();\n    }\n    throw new Exception('Oh no!');\n});\n\n$bot->onException(InvalidArgumentException::class, function (Nutgram $bot, InvalidArgumentException $exception) {\n    //\n});\n\n$bot->onException(Exception::class, function (Nutgram $bot, Exception $exception) {\n    //\n});\n\n$bot->run();\n")),(0,l.kt)("h3",{id:"onapierror"},(0,l.kt)("inlineCode",{parentName:"h3"},"onApiError")),(0,l.kt)("p",null,"The same concept of the ",(0,l.kt)("inlineCode",{parentName:"p"},"onException"),", but for outgoing requests:"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"chat_not_found",label:"Chat not found",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Exceptions\\TelegramException;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onMessage(function (Nutgram $bot) {\n    $bot->sendMessage(\n        text: 'Invalid call!',\n        chat_id: null,\n    );\n});\n\n$bot->onApiError(function (Nutgram $bot, TelegramException $exception) {\n    echo $exception->getMessage(); // Bad Request: chat not found\n    echo $exception->getCode(); // 400\n    error_log($exception);\n});\n\n$bot->run();\n"))),(0,l.kt)(i.Z,{value:"too_many_requests",label:"Too many requests",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Exceptions\\TelegramException;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onMessage(function (Nutgram $bot) {\n    foreach(range(1,200) as $i){\n        $bot->sendMessage('Too many calls!');\n    }\n});\n\n$bot->onApiError(function (Nutgram $bot, TelegramException $exception) {\n    echo $exception->getMessage(); // Too Many Requests: retry after 14\n    echo $exception->getCode(); // 429\n    echo $exception->getParameters(); // ['retry_after' => 14]\n    echo $exception->getParameter('retry_after'); // 14\n    echo $exception->hasParameter('retry_after'); // true\n    error_log($exception);\n});\n\n$bot->run();\n")))),(0,l.kt)("p",null,"Like the ",(0,l.kt)("inlineCode",{parentName:"p"},"onException"),", the handler support a regex matching the text returned by the telegram api:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Exceptions\\TelegramException;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onMessage(function (Nutgram $bot) {\n    $bot->sendMessage(\n        text: 'Invalid call!',\n        chat_id: null,\n    );\n});\n\n$bot->onApiError('chat not found', function (Nutgram $bot, TelegramException $exception) {\n    //\n});\n\n\n$bot->onApiError('user(.*)deactivated', function (Nutgram $bot, TelegramException $exception) {\n    //\n});\n\n$bot->run();\n")),(0,l.kt)("h4",{id:"register-api-exceptions"},"Register API exceptions"),(0,l.kt)("p",null,"As alternative method, you can also able to register a user defined\nTelegramApiError class to throw when a specific error occurs:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// exception file\nclass UserDeactivatedException extends ApiException\n{\n    public static ?string $pattern = '.*deactivated.*';\n}\n\n// handlers file\n$bot->registerApiException(UserDeactivatedException::class);\n")),(0,l.kt)("p",null,"As default, the ",(0,l.kt)("inlineCode",{parentName:"p"},"ApiException")," class will throw when invoked, but you can also override this behaviour:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"class UserDeactivatedException extends ApiException\n{\n    public static ?string $pattern = '.*deactivated.*';\n\n    public function __invoke(Nutgram $bot, TelegramException $e)\n    {\n        // override this method to change the default behaviour:\n        throw new static($e->getMessage(), $e->getCode(), $e);\n    }\n}\n")),(0,l.kt)("h3",{id:"beforeapirequest"},(0,l.kt)("inlineCode",{parentName:"h3"},"beforeApiRequest")),(0,l.kt)("p",null,"This handler, if defined, will be called before every outgoing request, passing the ",(0,l.kt)("inlineCode",{parentName:"p"},"$request")," as second argument:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->beforeApiRequest(function (Nutgram $bot, array $request, string $endpoint) {\n    // modify the outgoing request changing the text of the message if the endpoint is sendMessage\n    if($endpoint === 'sendMessage'){\n        $request['json']['text'] = 'Modified!';\n    }\n\n    return $request;\n});\n\n$bot->run();\n")),(0,l.kt)("h3",{id:"afterapirequest"},(0,l.kt)("inlineCode",{parentName:"h3"},"afterApiRequest")),(0,l.kt)("p",null,"This handler, if defined, will be called after every outgoing request, passing the ",(0,l.kt)("inlineCode",{parentName:"p"},"$response")," as second argument:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->afterApiRequest(function (Nutgram $bot, object $response) {\n    // print a value from the response\n    echo $response->result->text;\n\n    // modify the response\n    $response->result->text = 'Modified!';\n\n    return $response;\n});\n\n$bot->run();\n")),(0,l.kt)("h2",{id:"named-parameters-constraints"},"Named parameters constraints"),(0,l.kt)("p",null,"You may constrain the format of your named parameters using the ",(0,l.kt)("inlineCode",{parentName:"p"},"where")," method on a handler.\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"where")," method accepts the name of the parameter and a regular expression defining how the parameter should be constrained:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onCommand('hello {name}', HelloCommand::class)\n    ->where('name', '[A-Za-z]+');\n\n$bot->onCommand('hello {name} {age}', HelloCommand::class)\n    ->where(['name' => '[A-Za-z]+', 'age' => '[0-9]+']);\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"By default, parameters are constrained by the default regular expression ",(0,l.kt)("inlineCode",{parentName:"p"},".*"),".")),(0,l.kt)("p",null,"Here is the list of the other available constraints:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"whereIn(string $parameter, array $values)"),(0,l.kt)("br",null),"\nThe parameter must be contained in the given array.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onCommand('confirm {answer}', ConfirmCommand::class)\n    ->whereIn('answer', ['y','n']);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"whereAlpha(string $parameter)"),(0,l.kt)("br",null),"\nThe parameter must be entirely alphabetic characters.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onCommand('hello {name}', HelloCommand::class)\n    ->whereAlpha('name');\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"whereNumber(string $parameter)"),(0,l.kt)("br",null),"\nThe parameter must be entirely numeric characters.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onCommand('age {age}', AgeCommand::class)\n    ->whereNumber('age');\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"whereAlphaNumeric(string $parameter)"),(0,l.kt)("br",null),"\nThe parameter must be entirely alpha-numeric characters.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onCommand('hello {name}', HelloCommand::class)\n    ->whereAlphaNumeric('name');\n")),(0,l.kt)("p",null,"You can also use the ",(0,l.kt)("inlineCode",{parentName:"p"},"where")," methods in group method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$bot->group(function () use (Nutgram $bot) {\n    $bot->onCommand('create {name}', CreateCommand::class);\n    $bot->onCommand('delete {name}', DeleteCommand::class);\n})->whereAlpha('name');\n")),(0,l.kt)("h2",{id:"custom-parameters-binding"},"Custom parameters binding"),(0,l.kt)("p",null,"You can also bind custom parameters to the handler using the ",(0,l.kt)("inlineCode",{parentName:"p"},"bindParameter")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$bot = new Nutgram($_ENV['TOKEN']);\n$bot->bindParameter('hex', function(Container $container, string $value){\n    return Color::fromHex($value);\n});\n\n$bot->onCommand('color {hex}', function(Nutgram $bot, Color $color){\n    $bot->sendMessage(\"The color is {$color->name}\");\n});\n")),(0,l.kt)("h2",{id:"handlers-priority"},"Handlers Priority"),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"If you declare ",(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-SPECIFIC-blue"})," handlers, they will block the execution of ",(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GENERIC-brightgreen"})," handlers.",(0,l.kt)("br",null),"\n",(0,l.kt)("strong",{parentName:"p"},"Please keep this in mind when using Nutgram."))),(0,l.kt)("p",null,"Some examples to clarify this:"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"text",label:"Text",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// Input text: something\n\n// Specific handler: \u2705 it will be executed!\n$bot->onText('something', SomethingHandler::class);\n\n// Generic handler: \u274c it will not be executed!\n$bot->onMessageType(MessageType::TEXT, MessageTypeTextHandler::class);\n\n// Generic handler: \u274c it will not be executed!\n$bot->onMessage(MessageHandler::class);\n"))),(0,l.kt)(i.Z,{value:"successful_payment",label:"SuccessfulPayment",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// Input payload: donation\n\n// Specific handler: \u2705 it will be executed!\n$bot->onSuccessfulPaymentPayload('donation', DonationHandler::class);\n\n// Generic handler: \u274c it will not be executed!\n$bot->onSuccessfulPayment(SuccessfulPaymentHandler::class);\n"))),(0,l.kt)(i.Z,{value:"callback_query",label:"CallbackQuery",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// Input payload: mydata\n\n// Specific handler: \u2705 it will be executed!\n$bot->onCallbackQueryData('mydata', MyDataHandler::class);\n\n// Generic handler: \u274c it will not be executed!\n$bot->onCallbackQuery(CallbackQueryHandler::class);\n"))),(0,l.kt)(i.Z,{value:"pre_checkout_query",label:"PreCheckoutQuery",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// Input payload: mydata\n\n// Specific handler: \u2705 it will be executed!\n$bot->onPreCheckoutQueryPayload('mydata', MyDataHandler::class);\n\n// Generic handler: \u274c it will not be executed!\n$bot->onPreCheckoutQuery(PreCheckoutQueryHandler::class);\n")))),(0,l.kt)("h2",{id:"disable-handler-registration"},"Disable handler registration"),(0,l.kt)("p",null,"You can disable the registration of a specific handler, using the ",(0,l.kt)("inlineCode",{parentName:"p"},"unless")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$donationEnabled = false;\n\n$bot->onCommand('donate', DonateConversation::class)->unless($donationEnabled);\n$bot->onCommand('start donate', DonateConversation::class)->unless($donationEnabled);\n$bot->onPreCheckoutQuery(PreCheckoutQueryHandler::class)->unless($donationEnabled);\n$bot->onSuccessfulPayment(SuccessfulPaymentHandler::class)->unless($donationEnabled);\n\n// or\n\n$bot->group(function(){\n    $bot->onCommand('donate', DonateConversation::class);\n    $bot->onCommand('start donate', DonateConversation::class);\n    $bot->onPreCheckoutQuery(PreCheckoutQueryHandler::class);\n    $bot->onSuccessfulPayment(SuccessfulPaymentHandler::class);\n})->unless($donationEnabled);\n")),(0,l.kt)("h2",{id:"automatically-register-bot-commands"},"Automatically register bot commands"),(0,l.kt)("p",null,"The framework can also automatically set the bot commands for you, if you configure the ",(0,l.kt)("strong",{parentName:"p"},"description")," on it:"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"onCommand-handler",label:"onCommand Handler",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n// Called on command \"/start\"\n// It's possible to set a description for each command\n// this WILL be automatically registered\n$bot->onCommand('start', function (Nutgram $bot) {\n    return $bot->sendMessage('Hello, world!');\n})->description('The start command!');\n\n// Called on command \"/secret\"\n// this WILL NOT be automatically registered\n$bot->onCommand('secret', function (Nutgram $bot) {\n    return $bot->sendMessage('Shhh');\n});\n"))),(0,l.kt)(i.Z,{value:"command-class",label:"Command Class",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// 1. create a command class like \"StartCommand.php\":\n\nnamespace App\\Telegram\\Commands;\n\nuse SergiX44\\Nutgram\\Handlers\\Type\\Command;\nuse SergiX44\\Nutgram\\Nutgram;\n\nclass StartCommand extends Command\n{\n    // Called on command \"/start\"\n    protected string $command = 'start';\n\n    // It's possible to set a description for the current command\n    // this WILL be automatically registered\n    protected ?string $description = 'A lovely start command';\n\n    public function handle(Nutgram $bot): void\n    {\n        $bot->sendMessage('Hello there!');\n    }\n}\n\n// 2. Register StartCommand inside Nutgram\n\n$bot->registerCommand(StartCommand::class);\n")),(0,l.kt)("p",null,"You can also explicitly set a command as hidden overriding the ",(0,l.kt)("inlineCode",{parentName:"p"},"isHidden")," method adding your logic:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"namespace App\\Telegram\\Commands;\n\nuse SergiX44\\Nutgram\\Handlers\\Type\\Command;\nuse SergiX44\\Nutgram\\Nutgram;\n\nclass HiddenCommand extends Command\n{\n    protected string $command = 'hidden';\n\n    protected ?string $description = 'A super secret command';\n\n    public function handle(Nutgram $bot): void\n    {\n        $bot->sendMessage('Shhh!');\n    }\n\n    public function isHidden(): bool\n    {\n        return true;\n    }\n}\n")))),(0,l.kt)("h3",{id:"language-code-support"},"Language code support"),(0,l.kt)("p",null,"Nutgram also supports the ability to set the language code for each command."),(0,l.kt)("p",null,"To set a command for a specific language, you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"description")," method with an array of\ntwo-letter ISO 639-1 language code as keys\nand the description as value."),(0,l.kt)("p",null,"You can specify ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," as a wildcard for all languages not explicitly set."),(0,l.kt)("h4",{id:"no-language-code"},"No language code"),(0,l.kt)("p",null,"Commands will be applied to all users from the given scope, for whose language there are no dedicated commands."),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"onCommand-handler",label:"onCommand Handler",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onCommand('start', StartCommand::class)->description('The start command!');\n//or\n$bot->onCommand('start', StartCommand::class)->description(['*' => 'The start command!']);\n"))),(0,l.kt)(i.Z,{value:"command-class",label:"Command Class",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// 1. create a command class like \"StartCommand.php\":\nclass StartCommand extends Command\n{\n    protected string $command = 'start';\n\n    protected ?string $description = 'The start command!';\n\n    public function handle(Nutgram $bot): void\n    {\n        $bot->sendMessage('Hello there!');\n    }\n}\n\n// 2. Register StartCommand inside Nutgram\n$bot->registerCommand(StartCommand::class);\n")))),(0,l.kt)("h4",{id:"specific-language-code"},"Specific language code"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"onCommand-handler",label:"onCommand Handler",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onCommand('start', StartCommand::class)->description([\n    'it' => 'Il comando start!', // Italian\n    'es' => 'El comando start!', // Spanish\n    '*' => 'The start command!', // All other languages\n]);\n"))),(0,l.kt)(i.Z,{value:"command-class",label:"Command Class",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// 1. create a command class like \"StartCommand.php\":\nclass StartCommand extends Command\n{\n    protected string $command = 'start';\n\n    protected ?string $description = 'The start command!'; // All other languages\n\n    protected array $localizedDescriptions = [\n        'it' => 'Il comando start!', // Italian\n        'es' => 'El comando start!', // Spanish\n    ];\n\n    public function handle(Nutgram $bot): void\n    {\n        $bot->sendMessage('Hello there!');\n    }\n}\n\n// 2. Register StartCommand inside Nutgram\n$bot->registerCommand(StartCommand::class);\n")))),(0,l.kt)("h3",{id:"scope-support"},"Scope support"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://core.telegram.org/bots/features#command-scopes"},"Command Scopes")," allows for more granular control over which users or groups can see specific commands in the bot."),(0,l.kt)("h4",{id:"how-to-set-a-scope"},"How to set a scope"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"onCommand-handler",label:"onCommand Handler",default:!0,mdxType:"TabItem"},(0,l.kt)("p",null,"Just use the ",(0,l.kt)("inlineCode",{parentName:"p"},"scope")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"//single scope\n$bot\n    ->onCommand('start',  StartCommand::class)\n    ->description('Start command')\n    ->scope(new BotCommandScopeAllPrivateChats);\n\n// multiple scope (multiple calls)\n$bot\n    ->onCommand('start',  StartCommand::class)\n    ->description('Start command')\n    ->scope(new BotCommandScopeAllPrivateChats)\n    ->scope(new BotCommandScopeAllGroupChats);\n\n// multiple scope (as array)\n$bot\n    ->onCommand('start',  StartCommand::class)\n    ->description('Start command')\n    ->scope([\n        new BotCommandScopeAllPrivateChats,\n        new BotCommandScopeAllGroupChats,\n    ]);\n"))),(0,l.kt)(i.Z,{value:"command-class",label:"Command Class",mdxType:"TabItem"},(0,l.kt)("p",null,"Just override the ",(0,l.kt)("inlineCode",{parentName:"p"},"scopes")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"class StartCommand extends Command\n{\n    protected string $command = 'start';\n    protected ?string $description = 'Start command';\n\n    public function scopes(): array\n    {\n        return [\n            new BotCommandScopeAllPrivateChats,\n        ];\n    }\n\n    public function handle(Nutgram $bot): void\n    {\n        $bot->sendMessage('Hello there!');\n    }\n}\n")))),(0,l.kt)("h4",{id:"available-scopes"},"Available scopes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"new BotCommandScopeDefault();")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"new BotCommandScopeAllChatAdministrators();")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"new BotCommandScopeAllGroupChats();")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"new BotCommandScopeAllPrivateChats();")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"new BotCommandScopeChat(chat_id: 123);")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"new BotCommandScopeChatAdministrators(chat_id: 123);")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"new BotCommandScopeChatMember(chat_id: 123, user_id: 987);"))),(0,l.kt)("p",null,"For a description of each scope, please refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://core.telegram.org/bots/api#botcommandscope"},"official documentation")," page."),(0,l.kt)("h3",{id:"registering-commands"},"Registering commands"),(0,l.kt)("p",null,"To register the commands, you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"registerMyCommands")," method, which will automatically call the ",(0,l.kt)("inlineCode",{parentName:"p"},"setMyCommands")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$bot->registerMyCommands();\n")),(0,l.kt)("p",null,"And the result will be:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://i.imgur.com/65ofrw7.png",alt:"commands"})),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Please do not use the ",(0,l.kt)("inlineCode",{parentName:"p"},"registerMyCommands")," method in the same file where you register your bot handlers when using the ",(0,l.kt)("a",{parentName:"p",href:"/docs/usage/getting_updates#webhook"},(0,l.kt)("strong",{parentName:"a"},"Webhook"))," running mode,\nbecause the bot will register your commands on every webhook call, causing a lot of useless requests. Just call the method manually or after a deploy.")),(0,l.kt)("h2",{id:"oop"},"OOP"),(0,l.kt)("p",null,"So far you have seen handlers defined only as closures. But the framework, any definition that accepts a ",(0,l.kt)("inlineCode",{parentName:"p"},"$callable"),", also\naccepts a class-method definition, or invokable classes, like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\nclass MyCommand {\n\n    public function __invoke(Nutgram $bot, $param)\n    {\n      //do stuff\n    }\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n// all of those are valid definitions:\n$bot->onCommand('start {param}', MyCommand::class); // with __invoke\n$bot->onCommand('start1 {param}', [MyCommand::class, 'handle']); // class-method\n$bot->onCommand('start2 {param}', [$instance, 'handle']); // instance-method\n\n$bot->run();\n")),(0,l.kt)("h2",{id:"update-helpers"},"Update Helpers"),(0,l.kt)("p",null,"When dealing with updates, sometimes you may need to access data that is nested in the update structure, which can be\ntedious and produce ",(0,l.kt)("em",{parentName:"p"},"a lot")," of boilerplate, since the same objects can often be nested in other objects, depending on\nthe type of update. For this reason, the framework provides a number of ",(0,l.kt)("strong",{parentName:"p"},"support methods to quickly access the most\nused data, no matter the update type"),", like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onCommand('help', function (Nutgram $bot) {\n    // Get the Message object\n    $bot->message();\n\n    // Access the Chat object\n    $bot->chat();\n});\n\n$bot->onCommand('my_chat', function (Nutgram $bot) {\n    $bot->sendMessage('Your chat id is ' . $bot->chatId());\n});\n\n$bot->run();\n")),(0,l.kt)("h3",{id:"available-helpers"},"Available helpers"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Return type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"update()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?Update")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"Update")," object.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"chatId()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?int")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"chat_id")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"chat()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?Chat")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"Chat")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"userId()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?int")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"from"),".",(0,l.kt)("inlineCode",{parentName:"td"},"id")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"user()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?User")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"User")," (",(0,l.kt)("inlineCode",{parentName:"td"},"from")," Telegram's object) if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"messageId()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?int")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"message"),".",(0,l.kt)("inlineCode",{parentName:"td"},"message_id")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"message()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?Message")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"Message")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"isCallbackQuery()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"If the current update contains a ",(0,l.kt)("inlineCode",{parentName:"td"},"callback_query"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"callbackQuery()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?CallbackQuery")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"CallbackQuery")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"isInlineQuery()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"If the current update contains an ",(0,l.kt)("inlineCode",{parentName:"td"},"inline_query"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"inlineQuery()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?InlineQuery")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"InlineQuery")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"chosenInlineResult()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?ChosenInlineResult")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"ChosenInlineResult")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"shippingQuery()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?ShippingQuery")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"ShippingQuery")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"isPreCheckoutQuery()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"If the current update contains a ",(0,l.kt)("inlineCode",{parentName:"td"},"pre_checkout_query"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"preCheckoutQuery()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?PreCheckoutQuery")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"PreCheckoutQuery")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"poll()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?Poll")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"Poll")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pollAnswer()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?PollAnswer")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"PollAnswer")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"isMyChatMember()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"If the current ",(0,l.kt)("inlineCode",{parentName:"td"},"ChatMemberUpdated")," is in the ",(0,l.kt)("inlineCode",{parentName:"td"},"my_chat_member"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"chatMember()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?ChatMemberUpdated")),(0,l.kt)("td",{parentName:"tr",align:null},"The current ",(0,l.kt)("inlineCode",{parentName:"td"},"ChatMemberUpdated")," if available, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," otherwise.")))),(0,l.kt)("h2",{id:"persisting-data"},"Persisting data"),(0,l.kt)("p",null,"The framework gives you the ability to store data based on the update context: you can store data as ",(0,l.kt)("strong",{parentName:"p"},"globally"),"\nor ",(0,l.kt)("strong",{parentName:"p"},"per-user"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->setGlobalData('mykey', 'Hi!');\n$bot->setUserData('mykey', 'Ciao!', $userId);\n\n$value = $bot->getGlobalData('mykey'); // Hi!\n$value = $bot->getUserData('mykey', $userId); // Ciao!\n\n// when used inside a context, the $userId can be omitted.\n$bot->onCommand('help', function (Nutgram $bot) {\n    $bot->setUserData('mykey', 'called help!');\n    $value = $bot->getUserData('mykey'); // called help!\n});\n\n$bot->run();\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"If you need to persist data on disk, be sure to choose an appropriate cache adapter!")),(0,l.kt)("h3",{id:"available-methods"},"Available methods"),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GLOBALLY-brightgreen"}),"\xa0",(0,l.kt)("code",null,"getGlobalData($key, $default = null)"),(0,l.kt)("br",null),"Returns the data associated to the ",(0,l.kt)("code",null,"$key"),", if null ",(0,l.kt)("code",null,"$default")," is returned."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GLOBALLY-brightgreen"}),"\xa0",(0,l.kt)("code",null,"setGlobalData($key, $value, DateInterval|int|null $ttl = null)"),(0,l.kt)("br",null),"Returns ",(0,l.kt)("code",null,"bool")),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GLOBALLY-brightgreen"}),"\xa0",(0,l.kt)("code",null,"deleteGlobalData($key)"),(0,l.kt)("br",null),"Returns ",(0,l.kt)("code",null,"bool")),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-PER--USER-blue"}),"\xa0",(0,l.kt)("code",null,"getUserData($key, ?int $userId = null, $default = null)"),(0,l.kt)("br",null),"Returns the data associated to the ",(0,l.kt)("code",null,"$key"),", if null ",(0,l.kt)("code",null,"$default")," is returned."),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-PER--USER-blue"}),"\xa0",(0,l.kt)("code",null,"setUserData($key, $value, ?int $userId = null, DateInterval|int|null $ttl = null)"),(0,l.kt)("br",null),"Returns ",(0,l.kt)("code",null,"bool")),(0,l.kt)("div",{class:"margin-bottom--md"},(0,l.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-PER--USER-blue"}),"\xa0",(0,l.kt)("code",null,"deleteUserData($key, ?int $userId = null)"),(0,l.kt)("br",null),"Returns ",(0,l.kt)("code",null,"bool")))}u.isMDXComponent=!0}}]);