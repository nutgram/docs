"use strict";(self.webpackChunknutgram_docs=self.webpackChunknutgram_docs||[]).push([[8730],{85162:function(e,t,a){a.d(t,{Z:function(){return l}});var n=a(67294),s=a(86010),r="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(r,l),hidden:a},t)}},65488:function(e,t,a){a.d(t,{Z:function(){return c}});var n=a(83117),s=a(67294),r=a(86010),l=a(72389),i=a(67392),o=a(7094),p=a(12466),d="tabList__CuJ",u="tabItem_LNqP";function m(e){var t;const{lazy:a,block:l,defaultValue:m,values:c,groupId:k,className:h}=e,g=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),N=c??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),v=(0,i.l)(N,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===m?m:m??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==f&&!N.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${N.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:y}=(0,o.U)(),[C,T]=(0,s.useState)(f),x=[],{blockElementScrollPositionUntilNextRender:R}=(0,p.o5)();if(null!=k){const e=b[k];null!=e&&e!==C&&N.some((t=>t.value===e))&&T(e)}const w=e=>{const t=e.currentTarget,a=x.indexOf(t),n=N[a].value;n!==C&&(R(t),T(n),null!=k&&y(k,String(n)))},$=e=>{var t;let a=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;a=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;a=x[t]??x[x.length-1];break}}null==(t=a)||t.focus()};return s.createElement("div",{className:(0,r.Z)("tabs-container",d)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":l},h)},N.map((e=>{let{value:t,label:a,attributes:l}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>x.push(e),onKeyDown:$,onClick:w},l,{className:(0,r.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":C===t})}),a??t)}))),a?(0,s.cloneElement)(g.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function c(e){const t=(0,l.Z)();return s.createElement(m,(0,n.Z)({key:String(t)},e))}},20293:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var n=a(83117),s=(a(67294),a(3905)),r=(a(56022),a(65488)),l=a(85162);const i={},o="Available Assertions",p={unversionedId:"testing/asserting",id:"testing/asserting",title:"Available Assertions",description:"Overview",source:"@site/docs/testing/asserting.mdx",sourceDirName:"testing",slug:"/testing/asserting",permalink:"/docs/testing/asserting",draft:!1,editUrl:"https://github.com/nutgram/docs/tree/master/docs/testing/asserting.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Mock incoming responses",permalink:"/docs/testing/mocking"},next:{title:"Examples",permalink:"/docs/testing/examples"}},d={},u=[{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:3},{value:"Available Assertions",id:"available-assertions-1",level:2},{value:"assertRaw",id:"assertraw",level:3},{value:"assertCalled",id:"assertcalled",level:3},{value:"assertReply",id:"assertreply",level:3},{value:"assertReplyMessage",id:"assertreplymessage",level:3},{value:"assertReplyText",id:"assertreplytext",level:3},{value:"assertActiveConversation",id:"assertactiveconversation",level:3},{value:"assertNoConversation",id:"assertnoconversation",level:3},{value:"assertNoReply",id:"assertnoreply",level:3},{value:"assertSequence",id:"assertsequence",level:3},{value:"Asserting files",id:"asserting-files",level:2},{value:"Example",id:"example-1",level:3},{value:"OutgoingResource",id:"outgoingresource",level:3}],m={toc:u};function c(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"available-assertions"},"Available Assertions"),(0,s.kt)("h2",{id:"overview"},"Overview"),(0,s.kt)("p",null,"The assertions are the ones that perform the checks to ensure that things are going as planned."),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"The assertions must be called after the ",(0,s.kt)("inlineCode",{parentName:"p"},"reply()")," method!")),(0,s.kt)("h3",{id:"example"},"Example"),(0,s.kt)("p",null,"We assume that the ",(0,s.kt)("inlineCode",{parentName:"p"},"$this->bot")," is loaded as mentioned on the ",(0,s.kt)("a",{parentName:"p",href:"/docs/testing/introduction"},"Introduction")," page."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"test",label:"Test",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$this->bot\n     ->hearText('foo')\n     ->reply()\n     ->assertReplyText('bar');\n"))),(0,s.kt)(l.Z,{value:"handler",label:"Handler",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onText('foo', function (Nutgram $bot) {\n    $bot->sendMessage('bar');\n});\n")))),(0,s.kt)("h2",{id:"available-assertions-1"},"Available Assertions"),(0,s.kt)("div",{class:"container"},(0,s.kt)("div",{class:"row"},(0,s.kt)("div",{class:"col col--6"},(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertraw"},"assertRaw()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertcalled"},"assertCalled()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertreply"},"assertReply()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertreplymessage"},"assertReplyMessage()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertreplytext"},"assertReplyText()")))),(0,s.kt)("div",{class:"col col--6"},(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertactiveconversation"},"assertActiveConversation()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertnoconversation"},"assertNoConversation()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertnoreply"},"assertNoReply()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertsequence"},"assertSequence()")))))),(0,s.kt)("h3",{id:"assertraw"},"assertRaw"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertRaw")," asserts the given callback returns a truthy value.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"index")," parameter is optional."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertRaw(function(GuzzleHttp\\Psr7\\Request $request){\n    $content = json_decode((string)$request->getBody(), true, flags: JSON_THROW_ON_ERROR);\n    return $content['text'] === 'bar';\n}, index: 0);\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u26a0\ufe0f Caution!")," See the ",(0,s.kt)("a",{parentName:"p",href:"#asserting-files"},"Asserting files")," section to assert files sent with multi-part requests."),(0,s.kt)("h3",{id:"assertcalled"},"assertCalled"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertCalled")," asserts the given method name is called one time.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"times")," parameter is optional."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertCalled('sendMessage', times: 1);\n")),(0,s.kt)("h3",{id:"assertreply"},"assertReply"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertReply")," asserts the given method name is called in the index history.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"expected")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"index")," parameters are optionals."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertReply('sendMessage', expected: ['text' => 'foo'], index: 0);\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u26a0\ufe0f Caution!")," See the ",(0,s.kt)("a",{parentName:"p",href:"#asserting-files"},"Asserting files")," section to assert files sent with multi-part requests."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"test",label:"Test",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$this\n    ->bot\n    ->hearText('foo')\n    ->reply()\n    ->assertReply('sendMessage', ['text' => 'bar'], 0);\n    ->assertReply('sendMessage', ['text' => 'baz'], 1);\n"))),(0,s.kt)(l.Z,{value:"handler",label:"Handler",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onText('foo', function (Nutgram $bot) {\n    $bot->sendMessage('bar');\n    $bot->sendMessage('baz');\n});\n")))),(0,s.kt)("h3",{id:"assertreplymessage"},"assertReplyMessage"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertReplyMessage")," asserts the given data exists in the ",(0,s.kt)("inlineCode",{parentName:"p"},"message")," attribute.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"index")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"forceMethod")," parameters are optionals."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertReplyMessage(['text' => 'bar'], index: 0, forceMethod:'sendMessage');\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u26a0\ufe0f Caution!")," See the ",(0,s.kt)("a",{parentName:"p",href:"#asserting-files"},"Asserting files")," section to assert files sent with multi-part requests."),(0,s.kt)("h3",{id:"assertreplytext"},"assertReplyText"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertReplyText")," asserts the given value is equal to the ",(0,s.kt)("inlineCode",{parentName:"p"},"message->text")," attribute.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"index")," parameter is optional."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertReplyText('bar', index: 0);\n")),(0,s.kt)("h3",{id:"assertactiveconversation"},"assertActiveConversation"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertActiveConversation")," asserts there is an active conversation.\nThe parameters ",(0,s.kt)("inlineCode",{parentName:"p"},"userId")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"chatId")," are optionals."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertActiveConversation(userId: 123 , chatId: 321);\n")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"You must use the ",(0,s.kt)("inlineCode",{parentName:"p"},"willStartConversation()")," method to use this assertion without parameters.")),(0,s.kt)("h3",{id:"assertnoconversation"},"assertNoConversation"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertNoConversation")," asserts there is no active conversation.\nThe parameters ",(0,s.kt)("inlineCode",{parentName:"p"},"userId")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"chatId")," are optionals."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertNoConversation(userId: 123 , chatId: 321);\n")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"You must use the ",(0,s.kt)("inlineCode",{parentName:"p"},"willStartConversation()")," method to use this assertion without parameters.")),(0,s.kt)("h3",{id:"assertnoreply"},"assertNoReply"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertNoReply")," asserts there is no reply."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertNoReply();\n")),(0,s.kt)("h3",{id:"assertsequence"},"assertSequence"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertSequence")," asserts the given method names are called in the index history."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertSequence(\n    fn (FakeNutgram $x) => $x->assertReplyText('foo'), // index: 0\n    fn (FakeNutgram $x) => $x->assertReplyText('bar'), // index: 1\n    fn (FakeNutgram $x) => $x->assertReplyText('baz'), // index: 2\n);\n")),(0,s.kt)("h2",{id:"asserting-files"},"Asserting files"),(0,s.kt)("p",null,"When you send a file ",(0,s.kt)("strong",{parentName:"p"},"as resource")," via the following methods:\n",(0,s.kt)("inlineCode",{parentName:"p"},"sendPhoto"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"sendAudio"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"sendDocument"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"sendVideo"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"sendAnimation"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"sendVoice"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"sendVideoNote")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"sendSticker"),",\nNutgram will use a multi-part request."),(0,s.kt)("p",null,"With a multi-part request, the assertions ",(0,s.kt)("a",{parentName:"p",href:"#assertraw"},(0,s.kt)("inlineCode",{parentName:"a"},"assertRaw")),", ",(0,s.kt)("a",{parentName:"p",href:"#assertreply"},(0,s.kt)("inlineCode",{parentName:"a"},"assertReply")),",\n",(0,s.kt)("a",{parentName:"p",href:"#assertreplymessage"},(0,s.kt)("inlineCode",{parentName:"a"},"assertReplyMessage"))," will have an ",(0,s.kt)("a",{parentName:"p",href:"#outgoingresource"},(0,s.kt)("inlineCode",{parentName:"a"},"OutgoingResource"))," object instead of a ",(0,s.kt)("inlineCode",{parentName:"p"},"resource"),"\nin the field containing the file."),(0,s.kt)("h3",{id:"example-1"},"Example"),(0,s.kt)("p",null,"To assert files you must use the ",(0,s.kt)("inlineCode",{parentName:"p"},"assertRaw")," assertion in combination with ",(0,s.kt)("inlineCode",{parentName:"p"},"FormDataParser::parse($request)->files"),",\nsee the example below:"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"test",label:"Test",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$this\n    ->bot\n    ->hearText('foo')\n    ->reply()\n    ->assertReply('sendDocument', [\n        //'document' => ??? We can't assert `document` field here because is an OutgoingResource\n        'caption' => 'my caption',\n        'parse_mode' => ParseMode::HTML,\n    ])\n    ->assertRaw(function (Request $request) {\n        /** @var OutgoingResource $document */\n        $document = FormDataParser::parse($request)->files['document'];\n    \n        //check size\n        return $document->getSize() <= 123456;\n    });\n"))),(0,s.kt)(l.Z,{value:"handler",label:"Handler",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onText('foo', function (Nutgram $bot) {\n    $file = fopen('image.jpg', 'r');\n    $bot->sendDocument(\n        document: InputFile::make(file, 'name.jpg'),\n        caption: 'my caption',\n        parse_mode: ParseMode::HTML,\n    ]);\n    fclose($file);\n});\n")))),(0,s.kt)("h3",{id:"outgoingresource"},"OutgoingResource"),(0,s.kt)("p",null,"This object is a wrapper from an outgoing resource and provide the following methods:"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Method"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"getName()")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"?string")),(0,s.kt)("td",{parentName:"tr",align:"left"},"Returns the file name.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"getType()")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"?string")),(0,s.kt)("td",{parentName:"tr",align:"left"},"Returns the MIME content type.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"getSize()")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"int")),(0,s.kt)("td",{parentName:"tr",align:"left"},"Returns the file size in bytes.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"getError()")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"int")),(0,s.kt)("td",{parentName:"tr",align:"left"},"Returns 0 (There is no error) or 7 (Failed to create the resource)")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"getTmpResource()")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"?resource")),(0,s.kt)("td",{parentName:"tr",align:"left"},"Returns the resource.")))))}c.isMDXComponent=!0}}]);