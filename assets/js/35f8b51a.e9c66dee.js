"use strict";(self.webpackChunknutgram_docs=self.webpackChunknutgram_docs||[]).push([[1748],{48997:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return m}});var n=a(83117),o=a(67294),i=a(3905);a(56022);function l(e){let{children:t,name:a,type:n}=e;return o.createElement("div",{style:{display:"flex",flexDirection:"column",marginBottom:"0.5rem"}},o.createElement("div",{style:{fontWeight:"bold",fontFamily:"monospace",fontSize:"1.05rem"}},o.createElement("span",{style:{color:"#81a9fd"}},a),o.createElement("span",{style:{color:"#f58b6b"}},"()"),":\xa0",o.createElement("span",{style:{color:"#be8de1"}},n)),o.createElement("div",null,t))}const r={},p="Helpers",c={unversionedId:"usage/helpers",id:"usage/helpers",title:"Helpers",description:"Proxy Methods",source:"@site/docs/usage/helpers.mdx",sourceDirName:"usage",slug:"/usage/helpers",permalink:"/docs/usage/helpers",draft:!1,editUrl:"https://github.com/nutgram/docs/tree/master/docs/usage/helpers.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Inline Menu",permalink:"/docs/usage/inline_menu"},next:{title:"Extend",permalink:"/docs/usage/extend"}},s={},m=[{value:"Proxy Methods",id:"proxy-methods",level:2},{value:"ID Methods",id:"id-methods",level:3},{value:"Object Methods",id:"object-methods",level:3},{value:"Utility Methods",id:"utility-methods",level:3},{value:"Persisting Data",id:"persisting-data",level:2},{value:"Global Scope",id:"global-scope",level:3},{value:"Update Scope",id:"update-scope",level:3},{value:"User Scope",id:"user-scope",level:3},{value:"Deep Link Builder",id:"deep-link-builder",level:2},{value:"Available Methods",id:"available-methods",level:3},{value:"Constants",id:"constants",level:2},{value:"Limits",id:"limits",level:3},{value:"ReactionTypeEmoji",id:"reactiontypeemoji",level:3},{value:"Web Validation",id:"web-validation",level:3},{value:"Enums",id:"enums",level:2},{value:"ParseMode",id:"parsemode",level:3},{value:"ChatAction",id:"chataction",level:3},{value:"DiceEmoji",id:"diceemoji",level:3},{value:"ForumIconColor",id:"forumiconcolor",level:3},{value:"MaskPositionPoint",id:"maskpositionpoint",level:3},{value:"StickerType",id:"stickertype",level:3},{value:"StickerFormat",id:"stickerformat",level:3},{value:"Other Enums",id:"other-enums",level:3}],u={toc:m};function d(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"helpers"},"Helpers"),(0,i.kt)("h2",{id:"proxy-methods"},"Proxy Methods"),(0,i.kt)("p",null,"When dealing with updates, sometimes you may need to access data that is nested in the update structure, which can be\ntedious and produce ",(0,i.kt)("em",{parentName:"p"},"a lot")," of boilerplate, since the same objects can often be nested in other objects, depending on\nthe type of update. For this reason, the framework provides a number of ",(0,i.kt)("strong",{parentName:"p"},"support methods to quickly access the most\nused data, no matter the update type"),", like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onCommand('help', function (Nutgram $bot) {\n    // Get the Message object\n    $bot->message();\n\n    // Access the Chat object\n    $bot->chat();\n});\n\n$bot->onCommand('my_chat', function (Nutgram $bot) {\n    $bot->sendMessage('Your chat id is ' . $bot->chatId());\n});\n\n$bot->run();\n")),(0,i.kt)("h3",{id:"id-methods"},"ID Methods"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"userId",type:"?int",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"from.id")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"chatId",type:"?int",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"chat.id")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"updateId",type:"?int",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"update_id")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"messageId",type:"?int",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"message.message_id")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"messageThreadId",type:"?int",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"message.message_thread_id")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"businessConnectionId",type:"?string",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"message.business_connection_id")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"inlineMessageId",type:"?string",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"chosen_inline_result.inline_message_id ?? callback_query.inline_message_id")," if available, ",(0,i.kt)("code",null,"null")," otherwise."))),(0,i.kt)("h3",{id:"object-methods"},"Object Methods"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"update",type:"?Update",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"Update")," object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"user",type:"?User",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"User")," (",(0,i.kt)("code",null,"from")," Telegram's object) if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"chat",type:"?Chat",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"Chat")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"message",type:"?Message",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"Message")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"messageReaction",type:"?MessageReactionUpdated",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"MessageReaction")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"messageReactionCount",type:"?MessageReactionCountUpdated",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"MessageReactionCountUpdated")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"businessConnection",type:"?BusinessConnection",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"BusinessConnection")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"deletedBusinessMessages",type:"?BusinessMessagesDeleted",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"BusinessMessagesDeleted")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"inlineQuery",type:"?InlineQuery",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"InlineQuery")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"chosenInlineResult",type:"?ChosenInlineResult",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"ChosenInlineResult")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"callbackQuery",type:"?CallbackQuery",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"CallbackQuery")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"shippingQuery",type:"?ShippingQuery",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"ShippingQuery")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"preCheckoutQuery",type:"?PreCheckoutQuery",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"PreCheckoutQuery")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"purchasedPaidMedia",type:"?PaidMediaPurchased",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"PaidMediaPurchased")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"poll",type:"?Poll",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"Poll")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"pollAnswer",type:"?PollAnswer",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"PollAnswer")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"chatMember",type:"?ChatMemberUpdated",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"ChatMemberUpdated")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"chatJoinRequest",type:"?ChatJoinRequest",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"ChatJoinRequest")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"chatBoost",type:"?ChatBoostUpdated",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"ChatBoostUpdated")," if available, ",(0,i.kt)("code",null,"null")," otherwise.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"removedChatBoost",type:"?ChatBoostRemoved",mdxType:"Declaration"},"The current ",(0,i.kt)("code",null,"ChatBoostRemoved")," if available, ",(0,i.kt)("code",null,"null")," otherwise."))),(0,i.kt)("h3",{id:"utility-methods"},"Utility Methods"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"isCommand",type:"?bool",mdxType:"Declaration"},"If the current update is a command.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"isInlineQuery",type:"?bool",mdxType:"Declaration"},"If the current update contains an ",(0,i.kt)("code",null,"inline_query"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"isCallbackQuery",type:"?bool",mdxType:"Declaration"},"If the current update contains a ",(0,i.kt)("code",null,"callback_query"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"isPreCheckoutQuery",type:"?bool",mdxType:"Declaration"},"If the current update contains a ",(0,i.kt)("code",null,"pre_checkout_query"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"isMyChatMember",type:"?bool",mdxType:"Declaration"},"If the current ",(0,i.kt)("code",null,"ChatMemberUpdated")," is in the ",(0,i.kt)("code",null,"my_chat_member"),"."))),(0,i.kt)("h2",{id:"persisting-data"},"Persisting Data"),(0,i.kt)("p",null,"The framework gives you the ability to store data in 3 different scopes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-GLOBAL-brightgreen",alt:"Global"})," - Data that is available in ",(0,i.kt)("b",null,"all updates and users"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-UPDATE-orange",alt:"Update"})," - Data that is available in the ",(0,i.kt)("b",null,"current update"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("img",{style:{verticalAlign:"middle"},src:"https://img.shields.io/badge/-USER-blue",alt:"User"})," - Data that is available for the ",(0,i.kt)("b",null,"current user"),".")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you need to persist data on disk, be sure to choose an appropriate cache adapter!")),(0,i.kt)("h3",{id:"global-scope"},"Global Scope"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"setGlobalData",type:"bool",mdxType:"Declaration"},"Set a global data value.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"getGlobalData",type:"mixed",mdxType:"Declaration"},"Get a global data value.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"deleteGlobalData",type:"bool",mdxType:"Declaration"},"Delete a global data value."))),(0,i.kt)("h3",{id:"update-scope"},"Update Scope"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"set",type:"mixed",mdxType:"Declaration"},"Set a data value for the current update.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"get",type:"mixed",mdxType:"Declaration"},"Get a data value for the current update.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"delete",type:"bool",mdxType:"Declaration"},"Delete a data value for the current update.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"clear",type:"void",mdxType:"Declaration"},"Clear all data for the current update."))),(0,i.kt)("h3",{id:"user-scope"},"User Scope"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"setUserData",type:"bool",mdxType:"Declaration"},"Set a data value for the current user.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"getUserData",type:"mixed",mdxType:"Declaration"},"Get a data value for the current user.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(l,{name:"deleteUserData",type:"bool",mdxType:"Declaration"},"Delete a data value for the current user."))),(0,i.kt)("h2",{id:"deep-link-builder"},"Deep Link Builder"),(0,i.kt)("p",null,"Nutgram provides a simple way to create ",(0,i.kt)("a",{parentName:"p",href:"https://core.telegram.org/api/links"},"deep links")," to use in your bot.",(0,i.kt)("br",null),"\nYou can use the ",(0,i.kt)("code",null,"deepLink()")," function to create a deep link to your bot:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use function SergiX44\\Nutgram\\Support\\deepLink;\n\n$userLink = deepLink()->username('FooUser'); // https://t.me/FooUser\n")),(0,i.kt)("h3",{id:"available-methods"},"Available Methods"),(0,i.kt)("div",{class:"container"},(0,i.kt)("div",{class:"row"},(0,i.kt)("div",{class:"col col--6"},(0,i.kt)(l,{name:"username",type:"bool",mdxType:"Declaration"},"Public username link"),(0,i.kt)(l,{name:"contact",type:"string",mdxType:"Declaration"},"Temporary profile link"),(0,i.kt)(l,{name:"phone",type:"string",mdxType:"Declaration"},"Phone number links"),(0,i.kt)(l,{name:"joinChat",type:"string",mdxType:"Declaration"},"Chat invite links"),(0,i.kt)(l,{name:"addList",type:"string",mdxType:"Declaration"},"Chat folder links"),(0,i.kt)(l,{name:"publicMessage",type:"string",mdxType:"Declaration"},"Public message links"),(0,i.kt)(l,{name:"privateMessage",type:"string",mdxType:"Declaration"},"Private message links"),(0,i.kt)(l,{name:"publicForumTopic",type:"string",mdxType:"Declaration"},"Public forum topic links"),(0,i.kt)(l,{name:"privateForumTopic",type:"string",mdxType:"Declaration"},"Private forum topic links"),(0,i.kt)(l,{name:"share",type:"string",mdxType:"Declaration"},"Share links"),(0,i.kt)(l,{name:"videochat",type:"string",mdxType:"Declaration"},"Video chat links"),(0,i.kt)(l,{name:"livestream",type:"string",mdxType:"Declaration"},"Livestream links"),(0,i.kt)(l,{name:"addStickers",type:"string",mdxType:"Declaration"},"Stickerset links"),(0,i.kt)(l,{name:"addEmoji",type:"string",mdxType:"Declaration"},"Custom emojiset links"),(0,i.kt)(l,{name:"story",type:"string",mdxType:"Declaration"},"Story links"),(0,i.kt)(l,{name:"publicBoost",type:"string",mdxType:"Declaration"},"Public boost links"),(0,i.kt)(l,{name:"privateBoost",type:"string",mdxType:"Declaration"},"Private boost links"),(0,i.kt)(l,{name:"proxyMTP",type:"string",mdxType:"Declaration"},"MTProxy links"),(0,i.kt)(l,{name:"proxySocks5",type:"string",mdxType:"Declaration"},"Socks5 proxy links"),(0,i.kt)(l,{name:"addTheme",type:"string",mdxType:"Declaration"},"Theme links")),(0,i.kt)("div",{class:"col col--6"},(0,i.kt)(l,{name:"wallpaperImage",type:"string",mdxType:"Declaration"},"Image wallpapers"),(0,i.kt)(l,{name:"wallpaperSolidFill",type:"string",mdxType:"Declaration"},"Solid fill wallpapers"),(0,i.kt)(l,{name:"wallpaperGradientFill",type:"string",mdxType:"Declaration"},"Gradient fill wallpapers"),(0,i.kt)(l,{name:"wallpaperFreeformGradientFill",type:"string",mdxType:"Declaration"},"Freeform gradient fill wallpapers"),(0,i.kt)(l,{name:"wallpaperSolidPattern",type:"string",mdxType:"Declaration"},"Solid pattern wallpapers"),(0,i.kt)(l,{name:"wallpaperGradientPattern",type:"string",mdxType:"Declaration"},"Gradient pattern wallpapers"),(0,i.kt)(l,{name:"wallpaperFreeformGradientPattern",type:"string",mdxType:"Declaration"},"Freeform gradient pattern wallpapers"),(0,i.kt)(l,{name:"start",type:"string",mdxType:"Declaration"},"Bot links"),(0,i.kt)(l,{name:"startGroup",type:"string",mdxType:"Declaration"},"Group bot links"),(0,i.kt)(l,{name:"startChannel",type:"string",mdxType:"Declaration"},"Channel bot links"),(0,i.kt)(l,{name:"game",type:"string",mdxType:"Declaration"},"Game links"),(0,i.kt)(l,{name:"login",type:"string",mdxType:"Declaration"},"Login code link"),(0,i.kt)(l,{name:"invoice",type:"string",mdxType:"Declaration"},"Invoice links"),(0,i.kt)(l,{name:"setLanguage",type:"string",mdxType:"Declaration"},"Language pack links"),(0,i.kt)(l,{name:"confirmPhone",type:"string",mdxType:"Declaration"},"Phone confirmation links"),(0,i.kt)(l,{name:"giftcode",type:"string",mdxType:"Declaration"},"Premium giftcode links"),(0,i.kt)(l,{name:"startApp",type:"string",mdxType:"Declaration"},"Mini App links"),(0,i.kt)(l,{name:"miniApp",type:"string",mdxType:"Declaration"},"Direct mini app links"),(0,i.kt)(l,{name:"startAttach",type:"string",mdxType:"Declaration"},"Bot attachment or side menu links"),(0,i.kt)(l,{name:"attach",type:"string",mdxType:"Declaration"},"Bot attachment or side menu links")))),(0,i.kt)("h2",{id:"constants"},"Constants"),(0,i.kt)("p",null,"To make it easier to use the framework, we provide a number of constants that can be used in your code."),(0,i.kt)("h3",{id:"limits"},"Limits"),(0,i.kt)("p",null,"You can use the following constants to know the limits of the Telegram Bot API:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Telegram\\Limits;\n\n// For the moment, bots can download files of up to 20MB in size.\necho Limits::DOWNLOAD; // 20971520\n\n// Upload file limit in Byte. (50 MB)\necho Limits::UPLOAD; // 52428800\n\n// Caption max characters length\necho Limits::CAPTION_LENGTH; // 1024\n\n// Text max characters length\necho Limits::TEXT_LENGTH; // 4096\n\n// Minimum period in seconds for which the location will be updated (1 minute)\necho Limits::MIN_LIVE_PERIOD; // 60\n\n// Maximum period in seconds for which the location will be updated (24 hours)\necho Limits::MAX_LIVE_PERIOD; // 86400\n\n// Maximum poll question length\necho Limits::POLL_QUESTION_LENGTH; // 300\n\n// Callback data max length in bytes\necho Limits::CALLBACK_DATA_LENGTH; // 64\n")),(0,i.kt)("h3",{id:"reactiontypeemoji"},"ReactionTypeEmoji"),(0,i.kt)("p",null,"You can use the following constants to set the reaction type emoji:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Types\\Reaction\\ReactionTypeEmoji;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onMessage(function (Nutgram $bot) {\n    $bot->setMessageReaction([\n        new ReactionTypeEmoji(ReactionTypeType::THUMBS_UP), // \ud83d\udc4d\n    ]);\n});\n\n$bot->run();\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Available constants:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Telegram\\Types\\Reaction\\ReactionTypeEmoji;\n\necho ReactionTypeEmoji::THUMBS_UP;                     // \ud83d\udc4d\necho ReactionTypeEmoji::THUMBS_DOWN;                   // \ud83d\udc4e\necho ReactionTypeEmoji::HEART;                         // \u2764\ufe0f\necho ReactionTypeEmoji::FIRE;                          // \ud83d\udd25\necho ReactionTypeEmoji::SMILING_FACE_WITH_HEARTS;      // \ud83e\udd70\necho ReactionTypeEmoji::APPLAUSE;                      // \ud83d\udc4f\necho ReactionTypeEmoji::BEAMING_FACE;                  // \ud83d\ude01\necho ReactionTypeEmoji::THINKING_FACE;                 // \ud83e\udd14\necho ReactionTypeEmoji::EXPLODING_HEAD;                // \ud83e\udd2f\necho ReactionTypeEmoji::SCREAMING_FACE;                // \ud83d\ude31\necho ReactionTypeEmoji::FACE_WITH_SYMBOLS_ON_MOUTH;    // \ud83e\udd2c\necho ReactionTypeEmoji::CRYING_FACE;                   // \ud83d\ude22\necho ReactionTypeEmoji::PARTY_POPPER;                  // \ud83c\udf89\necho ReactionTypeEmoji::STAR_STRUCK;                   // \ud83e\udd29\necho ReactionTypeEmoji::FACE_VOMITING;                 // \ud83e\udd2e\necho ReactionTypeEmoji::POO;                           // \ud83d\udca9\necho ReactionTypeEmoji::FOLDED_HANDS;                  // \ud83d\ude4f\necho ReactionTypeEmoji::OK_HAND;                       // \ud83d\udc4c\necho ReactionTypeEmoji::DOVE;                          // \ud83d\udd4a\ufe0f\necho ReactionTypeEmoji::CLOWN_FACE;                    // \ud83e\udd21\necho ReactionTypeEmoji::YAWNING_FACE;                  // \ud83e\udd71\necho ReactionTypeEmoji::WOOZY_FACE;                    // \ud83e\udd74\necho ReactionTypeEmoji::SMILING_FACE_WITH_HEART_EYES;  // \ud83d\ude0d\necho ReactionTypeEmoji::WHALE;                         // \ud83d\udc33\necho ReactionTypeEmoji::FIRING_HEART;                  // \u2764\u200d\ud83d\udd25\necho ReactionTypeEmoji::NEW_MOON_FACE;                 // \ud83c\udf1a\necho ReactionTypeEmoji::HOT_DOG;                       // \ud83c\udf2d\necho ReactionTypeEmoji::HUNDRED_POINTS;                // \ud83d\udcaf\necho ReactionTypeEmoji::ROLLING_ON_THE_FLOOR_LAUGHING; // \ud83e\udd23\necho ReactionTypeEmoji::HIGH_VOLTAGE;                  // \u26a1\necho ReactionTypeEmoji::BANANA;                        // \ud83c\udf4c\necho ReactionTypeEmoji::TROPHY;                        // \ud83c\udfc6\necho ReactionTypeEmoji::BROKEN_HEART;                  // \ud83d\udc94\necho ReactionTypeEmoji::FACE_WITH_RAISED_EYEBROW;      // \ud83e\udd28\necho ReactionTypeEmoji::NEUTRAL_FACE;                  // \ud83d\ude10\necho ReactionTypeEmoji::STRAWBERRY;                    // \ud83c\udf53\necho ReactionTypeEmoji::CHAMPAGNE;                     // \ud83c\udf7e\necho ReactionTypeEmoji::KISS;                          // \ud83d\udc8b\necho ReactionTypeEmoji::MIDDLE_FINGER;                 // \ud83d\udd95\necho ReactionTypeEmoji::SMILING_FACE_WITH_HORNS;       // \ud83d\ude08\necho ReactionTypeEmoji::SLEEPING_FACE;                 // \ud83d\ude34\necho ReactionTypeEmoji::LOUDLY_CRYING_FACE;            // \ud83d\ude2d\necho ReactionTypeEmoji::NERD_FACE;                     // \ud83e\udd13\necho ReactionTypeEmoji::GHOST;                         // \ud83d\udc7b\necho ReactionTypeEmoji::MAN_TECHNOLOGIST;              // \ud83d\udc68\u200d\ud83d\udcbb\necho ReactionTypeEmoji::EYES;                          // \ud83d\udc40\necho ReactionTypeEmoji::JACK_O_LANTERN;                // \ud83c\udf83\necho ReactionTypeEmoji::SEE_NO_EVIL;                   // \ud83d\ude48\necho ReactionTypeEmoji::SMILING_FACE_WITH_HALO;        // \ud83d\ude07\necho ReactionTypeEmoji::FEARFUL_FACE;                  // \ud83d\ude28\necho ReactionTypeEmoji::HANDSHAKE;                     // \ud83e\udd1d\necho ReactionTypeEmoji::WRITING_HAND;                  // \u270d\ufe0f\necho ReactionTypeEmoji::HUGGING_FACE;                  // \ud83e\udd17\necho ReactionTypeEmoji::SALUTING_FACE;                 // \ud83e\udee1\necho ReactionTypeEmoji::SANTA_CLAUS;                   // \ud83c\udf85\necho ReactionTypeEmoji::CHRISTMAS_TREE;                // \ud83c\udf84\necho ReactionTypeEmoji::SNOWMAN;                       // \u26c4\necho ReactionTypeEmoji::NAIL_POLISH;                   // \ud83d\udc85\necho ReactionTypeEmoji::ZANY_FACE;                     // \ud83e\udd2a\necho ReactionTypeEmoji::MOAI;                          // \ud83d\uddff\necho ReactionTypeEmoji::COOL;                          // \ud83c\udd92\necho ReactionTypeEmoji::HEART_WITH_ARROW;              // \ud83d\udc98\necho ReactionTypeEmoji::HEAR_NO_EVIL;                  // \ud83d\ude49\necho ReactionTypeEmoji::UNICORN;                       // \ud83e\udd84\necho ReactionTypeEmoji::KISSING_FACE;                  // \ud83d\ude18\necho ReactionTypeEmoji::PILL;                          // \ud83d\udc8a\necho ReactionTypeEmoji::SPEAK_NO_EVIL;                 // \ud83d\ude4a\necho ReactionTypeEmoji::SMILING_FACE_WITH_SUNGLASSES;  // \ud83d\ude0e\necho ReactionTypeEmoji::ALIEN_MONSTER;                 // \ud83d\udc7e\necho ReactionTypeEmoji::SHRUGGING_MAN;                 // \ud83e\udd37\u200d\u2642\necho ReactionTypeEmoji::SHRUGGING_NEUTRAL;             // \ud83e\udd37\necho ReactionTypeEmoji::SHRUGGING_WOMAN;               // \ud83e\udd37\u200d\u2640\necho ReactionTypeEmoji::ENRAGED_FACE;                  // \ud83d\ude21\n")),(0,i.kt)("h3",{id:"web-validation"},"Web Validation"),(0,i.kt)("p",null,"The framework provides a static method to\n",(0,i.kt)("a",{parentName:"p",href:"https://core.telegram.org/bots/webapps#validating-data-for-third-party-use"},"validate webapp data for third-party use"),".",(0,i.kt)("br",null),"\nThis method ",(0,i.kt)("a",{parentName:"p",href:"./web_validation#validating-data-for-third-party-use"},(0,i.kt)("inlineCode",{parentName:"a"},"validateWebAppDataForThirdParty")),"\naccepts as third parameter a ",(0,i.kt)("inlineCode",{parentName:"p"},"publicKey")," string, which can be one of the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\n\n// Production (Nutgram::PUBLICKEY_PROD is the default value)\nNutgram::validateWebAppDataForThirdParty('botid', 'data', Nutgram::PUBLICKEY_PROD);\n\n// Test environment\nNutgram::validateWebAppDataForThirdParty('botid', 'data', Nutgram::PUBLICKEY_TEST);\n")),(0,i.kt)("h2",{id:"enums"},"Enums"),(0,i.kt)("p",null,"To avoid remembering the exact string values of the Telegram Bot API enums,\nyou can use the provided enums in the framework."),(0,i.kt)("p",null,"Here is a list of enums you can find/use using Nutgram:"),(0,i.kt)("h3",{id:"parsemode"},"ParseMode"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Available values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"ParseMode::MARKDOWN\nParseMode::MARKDOWN_LEGACY\nParseMode::HTML\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Properties\\ParseMode;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onCommand('start', function (Nutgram $bot) {\n    $bot->sendMessage(\n        text: '<b>Hello</b> world',\n        parse_mode: ParseMode::HTML,\n    );\n});\n\n$bot->run();\n")),(0,i.kt)("h3",{id:"chataction"},"ChatAction"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Available values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"ChatAction::TYPING\nChatAction::UPLOAD_PHOTO\nChatAction::RECORD_VIDEO\nChatAction::UPLOAD_VIDEO\nChatAction::RECORD_VOICE\nChatAction::UPLOAD_VOICE\nChatAction::UPLOAD_DOCUMENT\nChatAction::CHOOSE_STICKER\nChatAction::FIND_LOCATION\nChatAction::RECORD_VIDEO_NOTE\nChatAction::UPLOAD_VIDEO_NOTE\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Properties\\ParseMode;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onCommand('start', function (Nutgram $bot) {\n    $bot->sendChatAction(action: ChatAction::TYPING);\n});\n\n$bot->run();\n")),(0,i.kt)("h3",{id:"diceemoji"},"DiceEmoji"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Available values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"DiceEmoji::DICE\nDiceEmoji::DART\nDiceEmoji::BASKETBALL\nDiceEmoji::FOOTBALL\nDiceEmoji::SLOT\nDiceEmoji::BOWLING\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Properties\\ParseMode;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onCommand('start', function (Nutgram $bot) {\n    $bot->sendDice(emoji: DiceEmoji::DICE);\n});\n\n$bot->run();\n")),(0,i.kt)("h3",{id:"forumiconcolor"},"ForumIconColor"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Available values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"ForumIconColor::BLUE\nForumIconColor::YELLOW\nForumIconColor::PURPLE\nForumIconColor::GREEN\nForumIconColor::RED\nForumIconColor::ORANGE\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Properties\\ParseMode;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onCommand('create', function (Nutgram $bot) {\n    $bot->createForumTopic(\n        name: 'My Topic',\n        icon_color: ForumIconColor::BLUE,\n    );\n});\n\n$bot->run();\n")),(0,i.kt)("h3",{id:"maskpositionpoint"},"MaskPositionPoint"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Available values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"MaskPositionPoint::FOREHEAD\nMaskPositionPoint::EYES\nMaskPositionPoint::MOUTH\nMaskPositionPoint::CHIN\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Properties\\ParseMode;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onCommand('edit', function (Nutgram $bot) {\n    $bot->setStickerMaskPosition(\n        sticker: 'sticker_id',\n        mask_position: new MaskPosition(\n            point: MaskPositionPoint::FOREHEAD,\n            x_shift: 0.5,\n            y_shift: 0.5,\n            scale: 1.0,\n        ),\n    );\n});\n\n$bot->run();\n")),(0,i.kt)("h3",{id:"stickertype"},"StickerType"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Available values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"StickerType::REGULAR\nStickerType::MASK\nStickerType::CUSTOM_EMOJI\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Properties\\ParseMode;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onCommand('create', function (Nutgram $bot) {\n    $bot->createNewStickerSet(\n        name: 'my_sticker_pack',\n        title: 'MyStickerPack',\n        stickers: [\n            // ...\n        ],\n        sticker_type: StickerType::REGULAR,\n    );\n});\n\n$bot->run();\n")),(0,i.kt)("h3",{id:"stickerformat"},"StickerFormat"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Available values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"StickerFormat::STATIC\nStickerFormat::ANIMATED\nStickerFormat::VIDEO\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\Nutgram\\Nutgram;\nuse SergiX44\\Nutgram\\Telegram\\Properties\\ParseMode;\n\n$bot = new Nutgram($_ENV['TOKEN']);\n\n$bot->onCommand('create', function (Nutgram $bot) {\n    $bot->uploadStickerFile(\n        sticker: 'sticker_id',\n        sticker_format: StickerFormat::STATIC,\n    );\n});\n\n$bot->run();\n")),(0,i.kt)("h3",{id:"other-enums"},"Other Enums"),(0,i.kt)("p",null,"For a complete list of enums, you can check the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nutgram/nutgram/tree/master/src/Telegram/Properties"},"Properties")," folder\nin the source code."))}d.isMDXComponent=!0}}]);